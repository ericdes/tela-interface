//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ITela.Gc.Data
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    
    /// <summary>
    /// 
    /// </summary>
    public class Country
    {
        
        private static Dictionary<string, CountryRecord> _data;
        
        public static Dictionary<string, CountryRecord> DATA
        {
            get
            {
                if ((_data == null))
                {
                    _data = new Dictionary<string, CountryRecord>();
                    _data.Add("AF", new CountryRecord("AF", "Afghanistan"));
                    _data.Add("AL", new CountryRecord("AL", "Albania"));
                    _data.Add("DZ", new CountryRecord("DZ", "Algeria"));
                    _data.Add("AS", new CountryRecord("AS", "American Samoa"));
                    _data.Add("AD", new CountryRecord("AD", "Andorra"));
                    _data.Add("AO", new CountryRecord("AO", "Angola"));
                    _data.Add("AI", new CountryRecord("AI", "Anguilla"));
                    _data.Add("AQ", new CountryRecord("AQ", "Antarctica"));
                    _data.Add("AG", new CountryRecord("AG", "Antigua and Barbuda"));
                    _data.Add("AR", new CountryRecord("AR", "Argentina"));
                    _data.Add("AM", new CountryRecord("AM", "Armenia"));
                    _data.Add("AW", new CountryRecord("AW", "Aruba"));
                    _data.Add("AU", new CountryRecord("AU", "Australia"));
                    _data.Add("AT", new CountryRecord("AT", "Austria"));
                    _data.Add("AZ", new CountryRecord("AZ", "Azerbaijan"));
                    _data.Add("BS", new CountryRecord("BS", "Bahamas"));
                    _data.Add("BH", new CountryRecord("BH", "Bahrain"));
                    _data.Add("BD", new CountryRecord("BD", "Bangladesh"));
                    _data.Add("BB", new CountryRecord("BB", "Barbados"));
                    _data.Add("BY", new CountryRecord("BY", "Belarus"));
                    _data.Add("BE", new CountryRecord("BE", "Belgium"));
                    _data.Add("BZ", new CountryRecord("BZ", "Belize"));
                    _data.Add("BJ", new CountryRecord("BJ", "Benin"));
                    _data.Add("BM", new CountryRecord("BM", "Bermuda"));
                    _data.Add("BT", new CountryRecord("BT", "Bhutan"));
                    _data.Add("BO", new CountryRecord("BO", "Bolivia, Plurinational State of"));
                    _data.Add("BA", new CountryRecord("BA", "Bosnia and Herzegovina"));
                    _data.Add("BW", new CountryRecord("BW", "Botswana"));
                    _data.Add("BV", new CountryRecord("BV", "Bouvet Island"));
                    _data.Add("BR", new CountryRecord("BR", "Brazil"));
                    _data.Add("IO", new CountryRecord("IO", "British Indian Ocean Territory"));
                    _data.Add("BN", new CountryRecord("BN", "Brunei Darussalam"));
                    _data.Add("BG", new CountryRecord("BG", "Bulgaria"));
                    _data.Add("BF", new CountryRecord("BF", "Burkina Faso"));
                    _data.Add("BI", new CountryRecord("BI", "Burundi"));
                    _data.Add("KH", new CountryRecord("KH", "Cambodia"));
                    _data.Add("CM", new CountryRecord("CM", "Cameroon"));
                    _data.Add("CA", new CountryRecord("CA", "Canada"));
                    _data.Add("CV", new CountryRecord("CV", "Cape Verde"));
                    _data.Add("KY", new CountryRecord("KY", "Cayman Islands"));
                    _data.Add("CF", new CountryRecord("CF", "Central African Republic"));
                    _data.Add("TD", new CountryRecord("TD", "Chad"));
                    _data.Add("CL", new CountryRecord("CL", "Chile"));
                    _data.Add("CN", new CountryRecord("CN", "China"));
                    _data.Add("CX", new CountryRecord("CX", "Christmas Island"));
                    _data.Add("CC", new CountryRecord("CC", "Cocos (Keeling) Islands"));
                    _data.Add("CO", new CountryRecord("CO", "Colombia"));
                    _data.Add("KM", new CountryRecord("KM", "Comoros"));
                    _data.Add("CG", new CountryRecord("CG", "Congo"));
                    _data.Add("CK", new CountryRecord("CK", "Cook Islands"));
                    _data.Add("CR", new CountryRecord("CR", "Costa Rica"));
                    _data.Add("HR", new CountryRecord("HR", "Croatia"));
                    _data.Add("CU", new CountryRecord("CU", "Cuba"));
                    _data.Add("CY", new CountryRecord("CY", "Cyprus"));
                    _data.Add("CZ", new CountryRecord("CZ", "Czech Republic"));
                    _data.Add("CI", new CountryRecord("CI", "CÃ´te d\'Ivoire"));
                    _data.Add("DK", new CountryRecord("DK", "Denmark"));
                    _data.Add("DJ", new CountryRecord("DJ", "Djibouti"));
                    _data.Add("DM", new CountryRecord("DM", "Dominica"));
                    _data.Add("DO", new CountryRecord("DO", "Dominican Republic"));
                    _data.Add("EC", new CountryRecord("EC", "Ecuador"));
                    _data.Add("EG", new CountryRecord("EG", "Egypt"));
                    _data.Add("SV", new CountryRecord("SV", "El Salvador"));
                    _data.Add("GQ", new CountryRecord("GQ", "Equatorial Guinea"));
                    _data.Add("ER", new CountryRecord("ER", "Eritrea"));
                    _data.Add("EE", new CountryRecord("EE", "Estonia"));
                    _data.Add("ET", new CountryRecord("ET", "Ethiopia"));
                    _data.Add("FK", new CountryRecord("FK", "Falkland Islands (Malvinas)"));
                    _data.Add("FO", new CountryRecord("FO", "Faroe Islands"));
                    _data.Add("FJ", new CountryRecord("FJ", "Fiji"));
                    _data.Add("FI", new CountryRecord("FI", "Finland"));
                    _data.Add("FR", new CountryRecord("FR", "France"));
                    _data.Add("GF", new CountryRecord("GF", "French Guiana"));
                    _data.Add("PF", new CountryRecord("PF", "French Polynesia"));
                    _data.Add("TF", new CountryRecord("TF", "French Southern Territories"));
                    _data.Add("GA", new CountryRecord("GA", "Gabon"));
                    _data.Add("GM", new CountryRecord("GM", "Gambia"));
                    _data.Add("GE", new CountryRecord("GE", "Georgia"));
                    _data.Add("DE", new CountryRecord("DE", "Germany"));
                    _data.Add("GH", new CountryRecord("GH", "Ghana"));
                    _data.Add("GI", new CountryRecord("GI", "Gibraltar"));
                    _data.Add("GR", new CountryRecord("GR", "Greece"));
                    _data.Add("GL", new CountryRecord("GL", "Greenland"));
                    _data.Add("GD", new CountryRecord("GD", "Grenada"));
                    _data.Add("GP", new CountryRecord("GP", "Guadeloupe"));
                    _data.Add("GU", new CountryRecord("GU", "Guam"));
                    _data.Add("GT", new CountryRecord("GT", "Guatemala"));
                    _data.Add("GN", new CountryRecord("GN", "Guinea"));
                    _data.Add("GW", new CountryRecord("GW", "Guinea-Bissau"));
                    _data.Add("GY", new CountryRecord("GY", "Guyana"));
                    _data.Add("HT", new CountryRecord("HT", "Haiti"));
                    _data.Add("HM", new CountryRecord("HM", "Heard Island and McDonald Mcdonald Islands"));
                    _data.Add("VA", new CountryRecord("VA", "Holy See (Vatican City State)"));
                    _data.Add("HN", new CountryRecord("HN", "Honduras"));
                    _data.Add("HK", new CountryRecord("HK", "Hong Kong"));
                    _data.Add("HU", new CountryRecord("HU", "Hungary"));
                    _data.Add("IS", new CountryRecord("IS", "Iceland"));
                    _data.Add("IN", new CountryRecord("IN", "India"));
                    _data.Add("ID", new CountryRecord("ID", "Indonesia"));
                    _data.Add("IR", new CountryRecord("IR", "Iran, Islamic Republic of"));
                    _data.Add("IQ", new CountryRecord("IQ", "Iraq"));
                    _data.Add("IE", new CountryRecord("IE", "Ireland"));
                    _data.Add("IL", new CountryRecord("IL", "Israel"));
                    _data.Add("IT", new CountryRecord("IT", "Italy"));
                    _data.Add("JM", new CountryRecord("JM", "Jamaica"));
                    _data.Add("JP", new CountryRecord("JP", "Japan"));
                    _data.Add("JO", new CountryRecord("JO", "Jordan"));
                    _data.Add("KZ", new CountryRecord("KZ", "Kazakhstan"));
                    _data.Add("KE", new CountryRecord("KE", "Kenya"));
                    _data.Add("KI", new CountryRecord("KI", "Kiribati"));
                    _data.Add("KP", new CountryRecord("KP", "Korea, Democratic People\'s Republic of"));
                    _data.Add("KR", new CountryRecord("KR", "Korea, Republic of"));
                    _data.Add("KW", new CountryRecord("KW", "Kuwait"));
                    _data.Add("KG", new CountryRecord("KG", "Kyrgyzstan"));
                    _data.Add("LA", new CountryRecord("LA", "Lao People\'s Democratic Republic"));
                    _data.Add("LV", new CountryRecord("LV", "Latvia"));
                    _data.Add("LB", new CountryRecord("LB", "Lebanon"));
                    _data.Add("LS", new CountryRecord("LS", "Lesotho"));
                    _data.Add("LR", new CountryRecord("LR", "Liberia"));
                    _data.Add("LY", new CountryRecord("LY", "Libya"));
                    _data.Add("LI", new CountryRecord("LI", "Liechtenstein"));
                    _data.Add("LT", new CountryRecord("LT", "Lithuania"));
                    _data.Add("LU", new CountryRecord("LU", "Luxembourg"));
                    _data.Add("MO", new CountryRecord("MO", "Macao"));
                    _data.Add("MK", new CountryRecord("MK", "Macedonia, the Former Yugoslav Republic of"));
                    _data.Add("MG", new CountryRecord("MG", "Madagascar"));
                    _data.Add("MW", new CountryRecord("MW", "Malawi"));
                    _data.Add("MY", new CountryRecord("MY", "Malaysia"));
                    _data.Add("MV", new CountryRecord("MV", "Maldives"));
                    _data.Add("ML", new CountryRecord("ML", "Mali"));
                    _data.Add("MT", new CountryRecord("MT", "Malta"));
                    _data.Add("MH", new CountryRecord("MH", "Marshall Islands"));
                    _data.Add("MQ", new CountryRecord("MQ", "Martinique"));
                    _data.Add("MR", new CountryRecord("MR", "Mauritania"));
                    _data.Add("MU", new CountryRecord("MU", "Mauritius"));
                    _data.Add("YT", new CountryRecord("YT", "Mayotte"));
                    _data.Add("MX", new CountryRecord("MX", "Mexico"));
                    _data.Add("FM", new CountryRecord("FM", "Micronesia, Federated States of"));
                    _data.Add("MD", new CountryRecord("MD", "Moldova, Republic of"));
                    _data.Add("MC", new CountryRecord("MC", "Monaco"));
                    _data.Add("MN", new CountryRecord("MN", "Mongolia"));
                    _data.Add("MS", new CountryRecord("MS", "Montserrat"));
                    _data.Add("MA", new CountryRecord("MA", "Morocco"));
                    _data.Add("MZ", new CountryRecord("MZ", "Mozambique"));
                    _data.Add("MM", new CountryRecord("MM", "Myanmar"));
                    _data.Add("NA", new CountryRecord("NA", "Namibia"));
                    _data.Add("NR", new CountryRecord("NR", "Nauru"));
                    _data.Add("NP", new CountryRecord("NP", "Nepal"));
                    _data.Add("NL", new CountryRecord("NL", "Netherlands"));
                    _data.Add("NC", new CountryRecord("NC", "New Caledonia"));
                    _data.Add("NZ", new CountryRecord("NZ", "New Zealand"));
                    _data.Add("NI", new CountryRecord("NI", "Nicaragua"));
                    _data.Add("NE", new CountryRecord("NE", "Niger"));
                    _data.Add("NG", new CountryRecord("NG", "Nigeria"));
                    _data.Add("NU", new CountryRecord("NU", "Niue"));
                    _data.Add("NF", new CountryRecord("NF", "Norfolk Island"));
                    _data.Add("MP", new CountryRecord("MP", "Northern Mariana Islands"));
                    _data.Add("NO", new CountryRecord("NO", "Norway"));
                    _data.Add("OM", new CountryRecord("OM", "Oman"));
                    _data.Add("PK", new CountryRecord("PK", "Pakistan"));
                    _data.Add("PW", new CountryRecord("PW", "Palau"));
                    _data.Add("PA", new CountryRecord("PA", "Panama"));
                    _data.Add("PG", new CountryRecord("PG", "Papua New Guinea"));
                    _data.Add("PY", new CountryRecord("PY", "Paraguay"));
                    _data.Add("PE", new CountryRecord("PE", "Peru"));
                    _data.Add("PH", new CountryRecord("PH", "Philippines"));
                    _data.Add("PN", new CountryRecord("PN", "Pitcairn"));
                    _data.Add("PL", new CountryRecord("PL", "Poland"));
                    _data.Add("PT", new CountryRecord("PT", "Portugal"));
                    _data.Add("PR", new CountryRecord("PR", "Puerto Rico"));
                    _data.Add("QA", new CountryRecord("QA", "Qatar"));
                    _data.Add("RO", new CountryRecord("RO", "Romania"));
                    _data.Add("RU", new CountryRecord("RU", "Russian Federation"));
                    _data.Add("RW", new CountryRecord("RW", "Rwanda"));
                    _data.Add("RE", new CountryRecord("RE", "RÃ©union"));
                    _data.Add("SH", new CountryRecord("SH", "Saint Helena, Ascension and Tristan da Cunha"));
                    _data.Add("KN", new CountryRecord("KN", "Saint Kitts and Nevis"));
                    _data.Add("LC", new CountryRecord("LC", "Saint Lucia"));
                    _data.Add("PM", new CountryRecord("PM", "Saint Pierre and Miquelon"));
                    _data.Add("VC", new CountryRecord("VC", "Saint Vincent and the Grenadines"));
                    _data.Add("WS", new CountryRecord("WS", "Samoa"));
                    _data.Add("SM", new CountryRecord("SM", "San Marino"));
                    _data.Add("ST", new CountryRecord("ST", "Sao Tome and Principe"));
                    _data.Add("SA", new CountryRecord("SA", "Saudi Arabia"));
                    _data.Add("SN", new CountryRecord("SN", "Senegal"));
                    _data.Add("SC", new CountryRecord("SC", "Seychelles"));
                    _data.Add("SL", new CountryRecord("SL", "Sierra Leone"));
                    _data.Add("SG", new CountryRecord("SG", "Singapore"));
                    _data.Add("SK", new CountryRecord("SK", "Slovakia"));
                    _data.Add("SI", new CountryRecord("SI", "Slovenia"));
                    _data.Add("SB", new CountryRecord("SB", "Solomon Islands"));
                    _data.Add("SO", new CountryRecord("SO", "Somalia"));
                    _data.Add("ZA", new CountryRecord("ZA", "South Africa"));
                    _data.Add("GS", new CountryRecord("GS", "South Georgia and the South Sandwich Islands"));
                    _data.Add("ES", new CountryRecord("ES", "Spain"));
                    _data.Add("LK", new CountryRecord("LK", "Sri Lanka"));
                    _data.Add("SD", new CountryRecord("SD", "Sudan"));
                    _data.Add("SR", new CountryRecord("SR", "Suriname"));
                    _data.Add("SJ", new CountryRecord("SJ", "Svalbard and Jan Mayen"));
                    _data.Add("SZ", new CountryRecord("SZ", "Swaziland"));
                    _data.Add("SE", new CountryRecord("SE", "Sweden"));
                    _data.Add("CH", new CountryRecord("CH", "Switzerland"));
                    _data.Add("SY", new CountryRecord("SY", "Syrian Arab Republic"));
                    _data.Add("TW", new CountryRecord("TW", "Taiwan, Province of China"));
                    _data.Add("TJ", new CountryRecord("TJ", "Tajikistan"));
                    _data.Add("TZ", new CountryRecord("TZ", "Tanzania, United Republic of"));
                    _data.Add("TH", new CountryRecord("TH", "Thailand"));
                    _data.Add("TG", new CountryRecord("TG", "Togo"));
                    _data.Add("TK", new CountryRecord("TK", "Tokelau"));
                    _data.Add("TO", new CountryRecord("TO", "Tonga"));
                    _data.Add("TT", new CountryRecord("TT", "Trinidad and Tobago"));
                    _data.Add("TN", new CountryRecord("TN", "Tunisia"));
                    _data.Add("TR", new CountryRecord("TR", "Turkey"));
                    _data.Add("TM", new CountryRecord("TM", "Turkmenistan"));
                    _data.Add("TC", new CountryRecord("TC", "Turks and Caicos Islands"));
                    _data.Add("TV", new CountryRecord("TV", "Tuvalu"));
                    _data.Add("UG", new CountryRecord("UG", "Uganda"));
                    _data.Add("UA", new CountryRecord("UA", "Ukraine"));
                    _data.Add("AE", new CountryRecord("AE", "United Arab Emirates"));
                    _data.Add("GB", new CountryRecord("GB", "United Kingdom"));
                    _data.Add("US", new CountryRecord("US", "United States"));
                    _data.Add("UM", new CountryRecord("UM", "United States Minor Outlying Islands"));
                    _data.Add("UY", new CountryRecord("UY", "Uruguay"));
                    _data.Add("UZ", new CountryRecord("UZ", "Uzbekistan"));
                    _data.Add("VU", new CountryRecord("VU", "Vanuatu"));
                    _data.Add("VE", new CountryRecord("VE", "Venezuela, Bolivarian Republic of"));
                    _data.Add("VN", new CountryRecord("VN", "Viet Nam"));
                    _data.Add("VG", new CountryRecord("VG", "Virgin Islands, British"));
                    _data.Add("VI", new CountryRecord("VI", "Virgin Islands, U.S."));
                    _data.Add("WF", new CountryRecord("WF", "Wallis and Futuna"));
                    _data.Add("EH", new CountryRecord("EH", "Western Sahara"));
                    _data.Add("YE", new CountryRecord("YE", "Yemen"));
                    _data.Add("ZM", new CountryRecord("ZM", "Zambia"));
                    _data.Add("ZW", new CountryRecord("ZW", "Zimbabwe"));
                }
                return _data;
            }
        }
        
        public static IEnumerable<string> GetCodesAll()
        {
            return DATA.Keys;
        }
        
        public static IEnumerable<string> GetCodesAllNotIn<T>()
            where T : struct
        {
            var fields = System.Enum.GetValues(typeof(T));
            if ((fields.Length == 0))
            {
                throw new System.ArgumentOutOfRangeException("fields", "Enum of type T must contain at least one field.");
            }
            var existingCodes = new List<string>();
            for (int i = 0; (i < fields.Length); i = (i + 1))
            {
                var code = GcCodeValueParser.ReadCode(((System.Enum)(fields.GetValue(i))));
                existingCodes.Add(code);
            }
            return DATA.Keys.Except(existingCodes);
        }
        
        public static string GetValue(string code)
        {
            if ((code == null))
            {
                throw new System.ArgumentNullException("code");
            }
            if ((code.Length > 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or less characters.");
            }
            if ((code.Length < 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or more characters.");
            }
            return DATA[code].VALUE;
        }
        
        public static string GetValue(string code, Func<CountryRecord, string> selector)
        {
            if ((code == null))
            {
                throw new System.ArgumentNullException("code");
            }
            if ((code.Length > 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or less characters.");
            }
            if ((code.Length < 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or more characters.");
            }
            return selector(DATA[code]);
        }
        
        public static decimal GetValue(string code, Func<CountryRecord, decimal> selector)
        {
            if ((code == null))
            {
                throw new System.ArgumentNullException("code");
            }
            if ((code.Length > 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or less characters.");
            }
            if ((code.Length < 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or more characters.");
            }
            return selector(DATA[code]);
        }
        
        public static int GetValue(string code, Func<CountryRecord, int> selector)
        {
            if ((code == null))
            {
                throw new System.ArgumentNullException("code");
            }
            if ((code.Length > 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or less characters.");
            }
            if ((code.Length < 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or more characters.");
            }
            return selector(DATA[code]);
        }
        
        /// <summary>
        /// Returns a list of codes with data in selected column that match search text.
        /// Exact matches (equality ignoring cases) are returned first,
        /// then partial matches (always ignoring cases) if forceExactMatch has not been set.
        /// </summary>
        public static IEnumerable<string> GetCodesLike(string text, Func<CountryRecord, string> selector, bool forceExactMatch)
        {
            if ((text == null))
            {
                throw new System.ArgumentNullException("text");
            }
            var exactMatchingCodes = DATA.Where(x => selector(x.Value) != null && selector(x.Value).ToLowerInvariant() == text.ToLowerInvariant()).Select(x => x.Key);
            if ((forceExactMatch == true))
            {
                return exactMatchingCodes;
            }
            var containMatchingCodes = DATA.Where(x => selector(x.Value) != null && text.ToLowerInvariant().Contains(selector(x.Value).ToLowerInvariant())).Select(x => x.Key);
            var codes = new List<string>();
            codes.AddRange(exactMatchingCodes);
            codes.AddRange(containMatchingCodes.Except(exactMatchingCodes));
            return codes;
        }
        
        public class CountryRecord
        {
            
            public string Alpha2Code { get; private set; }
            
            public string Name { get; private set; }
            
            public CountryRecord(string alpha2Code, string name)
            {
                this.Alpha2Code = alpha2Code;
                this.Name = name;
            }
            
            public string CODE
            {
                get
                {
                    return this.Alpha2Code;
                }
            }
            
            public string VALUE
            {
                get
                {
                    return this.Name;
                }
            }
        }
    }
}
