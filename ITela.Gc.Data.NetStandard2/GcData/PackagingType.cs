//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ITela.Gc
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    
    /// <summary>
    /// 
    /// </summary>
    public class PackagingType : ITela.ICodeValueCollectionable
    {
        
        public static Dictionary<string, PackagingTypeRecord> DATA
        {
            get
            {
                var dict = new Dictionary<string, PackagingTypeRecord>();
                dict.Add("1A", new PackagingTypeRecord("1A", "Drum, steel"));
                dict["1A"].numeric = "34";
                dict.Add("1B", new PackagingTypeRecord("1B", "Drum, aluminium"));
                dict["1B"].numeric = "34";
                dict.Add("1D", new PackagingTypeRecord("1D", "Drum, plywood"));
                dict["1D"].numeric = "34";
                dict.Add("1F", new PackagingTypeRecord("1F", "Container, flexible"));
                dict["1F"].description = "A packaging container of flexible construction.";
                dict["1F"].numeric = "93";
                dict.Add("1G", new PackagingTypeRecord("1G", "Drum, fibre"));
                dict["1G"].numeric = "34";
                dict.Add("1W", new PackagingTypeRecord("1W", "Drum, wooden"));
                dict["1W"].numeric = "34 or 35";
                dict.Add("2C", new PackagingTypeRecord("2C", "Barrel, wooden"));
                dict["2C"].numeric = "44 or 45";
                dict.Add("3A", new PackagingTypeRecord("3A", "Jerrican, steel"));
                dict["3A"].numeric = "23 or 33";
                dict.Add("3H", new PackagingTypeRecord("3H", "Jerrican, plastic"));
                dict["3H"].numeric = "23 or 33";
                dict.Add("43", new PackagingTypeRecord("43", "Bag, super bulk"));
                dict["43"].description = "A cloth plastic or paper based bag having the dimensions of the pallet on which i" +
                    "t is constructed.";
                dict["43"].numeric = "64";
                dict.Add("44", new PackagingTypeRecord("44", "Bag, polybag"));
                dict["44"].description = "A type of plastic bag, typically used to wrap promotional pieces, publications, p" +
                    "roduct samples, and/or catalogues.";
                dict["44"].numeric = "62 or 63";
                dict.Add("4A", new PackagingTypeRecord("4A", "Box, steel"));
                dict["4A"].numeric = "21 to 25";
                dict.Add("4B", new PackagingTypeRecord("4B", "Box, aluminium"));
                dict["4B"].numeric = "21 to 25";
                dict.Add("4C", new PackagingTypeRecord("4C", "Box, natural wood"));
                dict["4C"].numeric = "21 to 25";
                dict.Add("4D", new PackagingTypeRecord("4D", "Box, plywood"));
                dict["4D"].numeric = "21 to 25";
                dict.Add("4F", new PackagingTypeRecord("4F", "Box, reconstituted wood"));
                dict["4F"].numeric = "21 to 25";
                dict.Add("4G", new PackagingTypeRecord("4G", "Box, fibreboard"));
                dict["4G"].numeric = "21 to 25";
                dict.Add("4H", new PackagingTypeRecord("4H", "Box, plastic"));
                dict["4H"].numeric = "21 to 25";
                dict.Add("5H", new PackagingTypeRecord("5H", "Bag, woven plastic"));
                dict["5H"].numeric = "62 to 64";
                dict.Add("5L", new PackagingTypeRecord("5L", "Bag, textile"));
                dict["5L"].numeric = "62 to 64";
                dict.Add("5M", new PackagingTypeRecord("5M", "Bag, paper"));
                dict["5M"].numeric = "62 to 64";
                dict.Add("6H", new PackagingTypeRecord("6H", "Composite packaging, plastic receptacle"));
                dict["6H"].numeric = "24 or 25 or\r 33 or 34";
                dict.Add("6P", new PackagingTypeRecord("6P", "Composite packaging, glass receptacle"));
                dict["6P"].numeric = "23 or 24 or 25 or\r 33 or 34 or 62 or\r 63";
                dict.Add("7A", new PackagingTypeRecord("7A", "Case, car"));
                dict["7A"].description = "A type of portable container designed to store equipment for carriage in an autom" +
                    "obile.";
                dict["7A"].numeric = "22 or 23";
                dict.Add("7B", new PackagingTypeRecord("7B", "Case, wooden"));
                dict["7B"].description = "A case made of wood for retaining substances or articles.";
                dict["7B"].numeric = "24 or 25";
                dict.Add("8A", new PackagingTypeRecord("8A", "Pallet, wooden"));
                dict["8A"].description = "A platform or open-ended box, made of wood, on which goods are retained for ease " +
                    "of mechanical handling during transport and storage.";
                dict["8A"].numeric = "24 or 25";
                dict.Add("8B", new PackagingTypeRecord("8B", "Crate, wooden"));
                dict["8B"].description = "A receptacle, made of wood, on which goods are retained for ease of mechanical ha" +
                    "ndling during transport and storage.";
                dict["8B"].numeric = "23 to 27";
                dict.Add("8C", new PackagingTypeRecord("8C", "Bundle, wooden"));
                dict["8C"].description = "Loose or unpacked pieces of wood tied or wrapped together.";
                dict["8C"].numeric = "16";
                dict.Add("AA", new PackagingTypeRecord("AA", "Intermediate bulk container, rigid plastic"));
                dict["AA"].numeric = "23 to 26";
                dict.Add("AB", new PackagingTypeRecord("AB", "Receptacle, fibre"));
                dict["AB"].description = "Containment vessel made of fibre used for retaining substances or articles.";
                dict["AB"].numeric = "21 to 23 or\r 31 to 33 or\r 41 to 43";
                dict.Add("AC", new PackagingTypeRecord("AC", "Receptacle, paper"));
                dict["AC"].description = "Containment vessel made of paper for retaining substances or articles.";
                dict["AC"].numeric = "21 to 23 or\r 31 to 33 or\r 41 to 43";
                dict.Add("AD", new PackagingTypeRecord("AD", "Receptacle, wooden"));
                dict["AD"].description = "Containment vessel made of wood for retaining substances or articles.";
                dict["AD"].numeric = "21 to 23 or\r 31 to 33 or\r 41 to 43";
                dict.Add("AE", new PackagingTypeRecord("AE", "Aerosol"));
                dict["AE"].numeric = "42 or 43";
                dict.Add("AF", new PackagingTypeRecord("AF", "Pallet, modular, collars 80cms * 60cms"));
                dict["AF"].description = "Standard sized pallet of dimensions 80 centimeters by 60 centimeters (cms).";
                dict["AF"].numeric = "92";
                dict.Add("AG", new PackagingTypeRecord("AG", "Pallet, shrinkwrapped"));
                dict["AG"].description = "Pallet load secured with transparent plastic film that has been wrapped around an" +
                    "d then shrunk tightly.";
                dict["AG"].numeric = "92";
                dict.Add("AH", new PackagingTypeRecord("AH", "Pallet, 100cms * 110cms"));
                dict["AH"].description = "Standard sized pallet of dimensions 100centimeters by 110 centimeters (cms).";
                dict["AH"].numeric = "92";
                dict.Add("AI", new PackagingTypeRecord("AI", "Clamshell"));
                dict["AI"].numeric = "21 to 23";
                dict.Add("AJ", new PackagingTypeRecord("AJ", "Cone"));
                dict["AJ"].description = "Container used in the transport of linear material such as yarn.";
                dict["AJ"].numeric = "51";
                dict.Add("AL", new PackagingTypeRecord("AL", "Ball"));
                dict["AL"].description = "A spherical containment vessel for retaining substances or articles.";
                dict["AL"].numeric = "46";
                dict.Add("AM", new PackagingTypeRecord("AM", "Ampoule, non-protected"));
                dict["AM"].numeric = "31";
                dict.Add("AP", new PackagingTypeRecord("AP", "Ampoule, protected"));
                dict["AP"].numeric = "31";
                dict.Add("AT", new PackagingTypeRecord("AT", "Atomizer"));
                dict["AT"].numeric = "42 or 43";
                dict.Add("AV", new PackagingTypeRecord("AV", "Capsule"));
                dict["AV"].numeric = "92";
                dict.Add("B4", new PackagingTypeRecord("B4", "Belt"));
                dict["B4"].description = "A band use to retain multiple articles together.";
                dict["B4"].numeric = "93";
                dict.Add("BA", new PackagingTypeRecord("BA", "Barrel"));
                dict["BA"].numeric = "44 or 45";
                dict.Add("BB", new PackagingTypeRecord("BB", "Bobbin"));
                dict["BB"].numeric = "91";
                dict.Add("BC", new PackagingTypeRecord("BC", "Bottlecrate / bottlerack"));
                dict["BC"].numeric = "29";
                dict.Add("BD", new PackagingTypeRecord("BD", "Board"));
                dict["BD"].numeric = "16";
                dict.Add("BE", new PackagingTypeRecord("BE", "Bundle"));
                dict["BE"].numeric = "61 to 65";
                dict.Add("BF", new PackagingTypeRecord("BF", "Balloon, non-protected"));
                dict["BF"].numeric = "42 or 43";
                dict.Add("BG", new PackagingTypeRecord("BG", "Bag"));
                dict["BG"].description = "A receptacle made of flexible material with an open or closed top.";
                dict["BG"].numeric = "62 to 64";
                dict.Add("BH", new PackagingTypeRecord("BH", "Bunch"));
                dict["BH"].numeric = "61 to 65";
                dict.Add("BI", new PackagingTypeRecord("BI", "Bin"));
                dict["BI"].numeric = "21 or 25";
                dict.Add("BJ", new PackagingTypeRecord("BJ", "Bucket"));
                dict["BJ"].numeric = "51";
                dict.Add("BK", new PackagingTypeRecord("BK", "Basket"));
                dict["BK"].numeric = "27";
                dict.Add("BL", new PackagingTypeRecord("BL", "Bale, compressed"));
                dict["BL"].numeric = "65";
                dict.Add("BM", new PackagingTypeRecord("BM", "Basin"));
                dict["BM"].numeric = "51";
                dict.Add("BN", new PackagingTypeRecord("BN", "Bale, non-compressed"));
                dict["BN"].numeric = "65";
                dict.Add("BO", new PackagingTypeRecord("BO", "Bottle, non-protected, cylindrical"));
                dict["BO"].description = "A narrow-necked cylindrical shaped vessel without external protective packing mat" +
                    "erial.";
                dict["BO"].numeric = "32 or 33";
                dict.Add("BP", new PackagingTypeRecord("BP", "Balloon, protected"));
                dict["BP"].numeric = "42 or 43";
                dict.Add("BQ", new PackagingTypeRecord("BQ", "Bottle, protected cylindrical"));
                dict["BQ"].description = "A narrow-necked cylindrical shaped vessel with external protective packing materi" +
                    "al.";
                dict["BQ"].numeric = "32 or 33";
                dict.Add("BR", new PackagingTypeRecord("BR", "Bar"));
                dict["BR"].numeric = "16";
                dict.Add("BS", new PackagingTypeRecord("BS", "Bottle, non-protected, bulbous"));
                dict["BS"].description = "A narrow-necked bulb shaped vessel without external protective packing material.";
                dict["BS"].numeric = "42 or 43";
                dict.Add("BT", new PackagingTypeRecord("BT", "Bolt"));
                dict["BT"].numeric = "13";
                dict.Add("BU", new PackagingTypeRecord("BU", "Butt"));
                dict["BU"].numeric = "44 or 45";
                dict.Add("BV", new PackagingTypeRecord("BV", "Bottle, protected bulbous"));
                dict["BV"].description = "A narrow-necked bulb shaped vessel with external protective packing material.";
                dict["BV"].numeric = "42 or 43";
                dict.Add("BW", new PackagingTypeRecord("BW", "Box, for liquids"));
                dict["BW"].numeric = "21 to 25";
                dict.Add("BX", new PackagingTypeRecord("BX", "Box"));
                dict["BX"].numeric = "21 to 25";
                dict.Add("BY", new PackagingTypeRecord("BY", "Board, in bundle/bunch/truss"));
                dict["BY"].numeric = "16";
                dict.Add("BZ", new PackagingTypeRecord("BZ", "Bars, in bundle/bunch/truss"));
                dict["BZ"].numeric = "16";
                dict.Add("CA", new PackagingTypeRecord("CA", "Can, rectangular"));
                dict["CA"].numeric = "22";
                dict.Add("CB", new PackagingTypeRecord("CB", "Crate, beer"));
                dict["CB"].numeric = "23 to 27";
                dict.Add("CC", new PackagingTypeRecord("CC", "Churn"));
                dict["CC"].numeric = "32 or 33";
                dict.Add("CD", new PackagingTypeRecord("CD", "Can, with handle and spout"));
                dict["CD"].numeric = "22";
                dict.Add("CE", new PackagingTypeRecord("CE", "Creel"));
                dict["CE"].numeric = "27";
                dict.Add("CF", new PackagingTypeRecord("CF", "Coffer"));
                dict["CF"].numeric = "24";
                dict.Add("CG", new PackagingTypeRecord("CG", "Cage"));
                dict["CG"].numeric = "26";
                dict.Add("CH", new PackagingTypeRecord("CH", "Chest"));
                dict["CH"].numeric = "25";
                dict.Add("CI", new PackagingTypeRecord("CI", "Canister"));
                dict["CI"].numeric = "21 or 22";
                dict.Add("CJ", new PackagingTypeRecord("CJ", "Coffin"));
                dict["CJ"].numeric = "54";
                dict.Add("CK", new PackagingTypeRecord("CK", "Cask"));
                dict["CK"].numeric = "44 or 45";
                dict.Add("CL", new PackagingTypeRecord("CL", "Coil"));
                dict["CL"].numeric = "14";
                dict.Add("CM", new PackagingTypeRecord("CM", "Card"));
                dict["CM"].description = "A flat package usually made of fibreboard from/to which product is often hung or " +
                    "attached.";
                dict["CM"].numeric = "67";
                dict.Add("CN", new PackagingTypeRecord("CN", "Container, not otherwise specified as transport equipment"));
                dict["CN"].numeric = "25";
                dict.Add("CO", new PackagingTypeRecord("CO", "Carboy, non-protected"));
                dict["CO"].numeric = "43";
                dict.Add("CP", new PackagingTypeRecord("CP", "Carboy, protected"));
                dict["CP"].numeric = "43";
                dict.Add("CQ", new PackagingTypeRecord("CQ", "Cartridge"));
                dict["CQ"].description = "Package containing a charge such as propelling explosive for firearms or ink tone" +
                    "r for a printer.";
                dict["CQ"].numeric = "92";
                dict.Add("CR", new PackagingTypeRecord("CR", "Crate"));
                dict["CR"].numeric = "24 to 25";
                dict.Add("CS", new PackagingTypeRecord("CS", "Case"));
                dict["CS"].numeric = "21 to 25";
                dict.Add("CT", new PackagingTypeRecord("CT", "Carton"));
                dict["CT"].numeric = "22 to 24";
                dict.Add("CU", new PackagingTypeRecord("CU", "Cup"));
                dict["CU"].numeric = "51";
                dict.Add("CV", new PackagingTypeRecord("CV", "Cover"));
                dict["CV"].numeric = "67";
                dict.Add("CW", new PackagingTypeRecord("CW", "Cage, roll"));
                dict["CW"].numeric = "26";
                dict.Add("CX", new PackagingTypeRecord("CX", "Can, cylindrical"));
                dict["CX"].numeric = "32";
                dict.Add("CY", new PackagingTypeRecord("CY", "Cylinder"));
                dict["CY"].numeric = "12";
                dict.Add("CZ", new PackagingTypeRecord("CZ", "Canvas"));
                dict["CZ"].numeric = "67";
                dict.Add("DA", new PackagingTypeRecord("DA", "Crate, multiple layer, plastic"));
                dict["DA"].numeric = "23 to 25 or 27";
                dict.Add("DB", new PackagingTypeRecord("DB", "Crate, multiple layer, wooden"));
                dict["DB"].numeric = "23 to 25 or 27";
                dict.Add("DC", new PackagingTypeRecord("DC", "Crate, multiple layer, cardboard"));
                dict["DC"].numeric = "23 to 25 or 27";
                dict.Add("DG", new PackagingTypeRecord("DG", "Cage, Commonwealth Handling Equipment Pool  (CHEP)"));
                dict["DG"].numeric = "26";
                dict.Add("DH", new PackagingTypeRecord("DH", "Box, Commonwealth Handling Equipment Pool (CHEP), Eurobox"));
                dict["DH"].description = "A box mounted on a pallet base under the control of CHEP.";
                dict["DH"].numeric = "27";
                dict.Add("DI", new PackagingTypeRecord("DI", "Drum, iron"));
                dict["DI"].numeric = "34";
                dict.Add("DJ", new PackagingTypeRecord("DJ", "Demijohn, non-protected"));
                dict["DJ"].numeric = "43";
                dict.Add("DK", new PackagingTypeRecord("DK", "Crate, bulk, cardboard"));
                dict["DK"].numeric = "23 to 25 or 27";
                dict.Add("DL", new PackagingTypeRecord("DL", "Crate, bulk, plastic"));
                dict["DL"].numeric = "23 to 25 or 27";
                dict.Add("DM", new PackagingTypeRecord("DM", "Crate, bulk, wooden"));
                dict["DM"].numeric = "23 to 25 or 27";
                dict.Add("DN", new PackagingTypeRecord("DN", "Dispenser"));
                dict["DN"].numeric = "93";
                dict.Add("DP", new PackagingTypeRecord("DP", "Demijohn, protected"));
                dict["DP"].numeric = "43";
                dict.Add("DR", new PackagingTypeRecord("DR", "Drum"));
                dict["DR"].numeric = "34";
                dict.Add("DS", new PackagingTypeRecord("DS", "Tray, one layer no cover, plastic"));
                dict["DS"].numeric = "27";
                dict.Add("DT", new PackagingTypeRecord("DT", "Tray, one layer no cover, wooden"));
                dict["DT"].numeric = "27";
                dict.Add("DU", new PackagingTypeRecord("DU", "Tray, one layer no cover, polystyrene"));
                dict["DU"].numeric = "27";
                dict.Add("DV", new PackagingTypeRecord("DV", "Tray, one layer no cover, cardboard"));
                dict["DV"].numeric = "27";
                dict.Add("DW", new PackagingTypeRecord("DW", "Tray, two layers no cover, plastic tray"));
                dict["DW"].numeric = "27 or 29";
                dict.Add("DX", new PackagingTypeRecord("DX", "Tray, two layers no cover, wooden"));
                dict["DX"].numeric = "27 or 29";
                dict.Add("DY", new PackagingTypeRecord("DY", "Tray, two layers no cover, cardboard"));
                dict["DY"].numeric = "27 or 29";
                dict.Add("EC", new PackagingTypeRecord("EC", "Bag, plastic"));
                dict["EC"].numeric = "62 to 64";
                dict.Add("ED", new PackagingTypeRecord("ED", "Case, with pallet base"));
                dict["ED"].numeric = "23 to 25";
                dict.Add("EE", new PackagingTypeRecord("EE", "Case, with pallet base, wooden"));
                dict["EE"].numeric = "23 to 25";
                dict.Add("EF", new PackagingTypeRecord("EF", "Case, with pallet base, cardboard"));
                dict["EF"].numeric = "23 to 25";
                dict.Add("EG", new PackagingTypeRecord("EG", "Case, with pallet base, plastic"));
                dict["EG"].numeric = "23 to 25";
                dict.Add("EH", new PackagingTypeRecord("EH", "Case, with pallet base, metal"));
                dict["EH"].numeric = "23 to 25";
                dict.Add("EI", new PackagingTypeRecord("EI", "Case, isothermic"));
                dict["EI"].numeric = "22 to 25";
                dict.Add("EN", new PackagingTypeRecord("EN", "Envelope"));
                dict["EN"].numeric = "67";
                dict.Add("FB", new PackagingTypeRecord("FB", "Flexibag"));
                dict["FB"].description = "A flexible containment bag made of plastic, typically for the transportation bulk" +
                    " non-hazardous cargoes using standard size shipping containers.";
                dict["FB"].numeric = "65";
                dict.Add("FC", new PackagingTypeRecord("FC", "Crate, fruit"));
                dict["FC"].numeric = "23 to 27";
                dict.Add("FD", new PackagingTypeRecord("FD", "Crate, framed"));
                dict["FD"].numeric = "26";
                dict.Add("FE", new PackagingTypeRecord("FE", "Flexitank"));
                dict["FE"].description = "A flexible containment tank made of plastic, typically for the transportation bul" +
                    "k non-hazardous cargoes using standard size shipping containers.";
                dict["FE"].numeric = "65";
                dict.Add("FI", new PackagingTypeRecord("FI", "Firkin"));
                dict["FI"].numeric = "44 or 45";
                dict.Add("FL", new PackagingTypeRecord("FL", "Flask"));
                dict["FL"].numeric = "42 or 43";
                dict.Add("FO", new PackagingTypeRecord("FO", "Footlocker"));
                dict["FO"].numeric = "23";
                dict.Add("FP", new PackagingTypeRecord("FP", "Filmpack"));
                dict["FP"].numeric = "67";
                dict.Add("FR", new PackagingTypeRecord("FR", "Frame"));
                dict["FR"].numeric = "26";
                dict.Add("FT", new PackagingTypeRecord("FT", "Foodtainer"));
                dict["FT"].numeric = "21 to 23";
                dict.Add("FW", new PackagingTypeRecord("FW", "Cart, flatbed"));
                dict["FW"].description = "Wheeled flat bedded device on which trays or other regular shaped items are packe" +
                    "d for transportation purposes.";
                dict["FW"].numeric = "94";
                dict.Add("FX", new PackagingTypeRecord("FX", "Bag, flexible container"));
                dict["FX"].numeric = "61 to 66";
                dict.Add("GB", new PackagingTypeRecord("GB", "Bottle, gas"));
                dict["GB"].description = "A narrow-necked metal cylinder for retention of liquefied or compressed gas.";
                dict["GB"].numeric = "31 or 35";
                dict.Add("GI", new PackagingTypeRecord("GI", "Girder"));
                dict["GI"].numeric = "16";
                dict.Add("GL", new PackagingTypeRecord("GL", "Container, gallon"));
                dict["GL"].description = "A container with a capacity of one gallon.";
                dict["GL"].numeric = "32";
                dict.Add("GR", new PackagingTypeRecord("GR", "Receptacle, glass"));
                dict["GR"].description = "Containment vessel made of glass for retaining substances or articles.";
                dict["GR"].numeric = "21 to 23 or\r 31 to 33 or\r 41 to 43";
                dict.Add("GU", new PackagingTypeRecord("GU", "Tray, containing horizontally stacked flat items"));
                dict["GU"].description = "Tray containing flat items stacked on top of one another.";
                dict["GU"].numeric = "27";
                dict.Add("GY", new PackagingTypeRecord("GY", "Bag, gunny"));
                dict["GY"].description = "A sack made of gunny or burlap, used for transporting coarse commodities, such as" +
                    " grains, potatoes, and other agricultural products.";
                dict["GY"].numeric = "63 to 64";
                dict.Add("GZ", new PackagingTypeRecord("GZ", "Girders, in bundle/bunch/truss"));
                dict["GZ"].numeric = "16";
                dict.Add("HA", new PackagingTypeRecord("HA", "Basket, with handle, plastic"));
                dict["HA"].numeric = "27";
                dict.Add("HB", new PackagingTypeRecord("HB", "Basket, with handle, wooden"));
                dict["HB"].numeric = "27";
                dict.Add("HC", new PackagingTypeRecord("HC", "Basket, with handle, cardboard"));
                dict["HC"].numeric = "27";
                dict.Add("HG", new PackagingTypeRecord("HG", "Hogshead"));
                dict["HG"].numeric = "44 or 45";
                dict.Add("HN", new PackagingTypeRecord("HN", "Hanger"));
                dict["HN"].description = "A purpose shaped device with a hook at the top for hanging items from a rail.";
                dict["HN"].numeric = "93";
                dict.Add("HR", new PackagingTypeRecord("HR", "Hamper"));
                dict["HR"].numeric = "23";
                dict.Add("IA", new PackagingTypeRecord("IA", "Package, display, wooden"));
                dict["IA"].numeric = "21 to 23";
                dict.Add("IB", new PackagingTypeRecord("IB", "Package, display, cardboard"));
                dict["IB"].numeric = "21 to 23";
                dict.Add("IC", new PackagingTypeRecord("IC", "Package, display, plastic"));
                dict["IC"].numeric = "21 to 23";
                dict.Add("ID", new PackagingTypeRecord("ID", "Package, display, metal"));
                dict["ID"].numeric = "21 to 23";
                dict.Add("IE", new PackagingTypeRecord("IE", "Package, show"));
                dict["IE"].numeric = "21 to 23";
                dict.Add("IF", new PackagingTypeRecord("IF", "Package, flow"));
                dict["IF"].description = "A flexible tubular package or skin, possibly transparent, often used for containm" +
                    "ent of foodstuffs (e.g. salami sausage).";
                dict["IF"].numeric = "61 or 62";
                dict.Add("IG", new PackagingTypeRecord("IG", "Package, paper wrapped"));
                dict["IG"].numeric = "21 to 23";
                dict.Add("IH", new PackagingTypeRecord("IH", "Drum, plastic"));
                dict["IH"].numeric = "34";
                dict.Add("IK", new PackagingTypeRecord("IK", "Package, cardboard, with bottle grip-holes"));
                dict["IK"].description = "Packaging material made out of cardboard that facilitates the separation of indiv" +
                    "idual glass or plastic bottles.";
                dict["IK"].numeric = "21 to 23";
                dict.Add("IL", new PackagingTypeRecord("IL", "Tray, rigid, lidded stackable (CEN TS 14482:2002)"));
                dict["IL"].description = "Lidded stackable rigid tray compliant with CEN TS 14482:2002.";
                dict["IL"].numeric = "27";
                dict.Add("IN", new PackagingTypeRecord("IN", "Ingot"));
                dict["IN"].numeric = "17";
                dict.Add("IZ", new PackagingTypeRecord("IZ", "Ingots, in bundle/bunch/truss"));
                dict["IZ"].numeric = "17";
                dict.Add("JB", new PackagingTypeRecord("JB", "Bag, jumbo"));
                dict["JB"].description = "A flexible containment bag, widely used for storage, transportation and handling " +
                    "of powder, flake or granular materials. Typically constructed from woven polypro" +
                    "pylene (PP) fabric in the form of cubic bags.";
                dict["JB"].numeric = "65";
                dict.Add("JC", new PackagingTypeRecord("JC", "Jerrican, rectangular"));
                dict["JC"].numeric = "23";
                dict.Add("JG", new PackagingTypeRecord("JG", "Jug"));
                dict["JG"].numeric = "41";
                dict.Add("JR", new PackagingTypeRecord("JR", "Jar"));
                dict["JR"].numeric = "41";
                dict.Add("JT", new PackagingTypeRecord("JT", "Jutebag"));
                dict["JT"].numeric = "61 or 65";
                dict.Add("JY", new PackagingTypeRecord("JY", "Jerrican, cylindrical"));
                dict["JY"].numeric = "33";
                dict.Add("KG", new PackagingTypeRecord("KG", "Keg"));
                dict["KG"].numeric = "44 or 45";
                dict.Add("KI", new PackagingTypeRecord("KI", "Kit"));
                dict["KI"].description = "A set of articles or implements used for a specific purpose.";
                dict["KI"].numeric = "92";
                dict.Add("LE", new PackagingTypeRecord("LE", "Luggage"));
                dict["LE"].description = "A collection of bags, cases and/or containers which hold personal belongings for " +
                    "a journey.";
                dict["LE"].numeric = "21 to 23 or\r 61 to 63";
                dict.Add("LG", new PackagingTypeRecord("LG", "Log"));
                dict["LG"].numeric = "12";
                dict.Add("LT", new PackagingTypeRecord("LT", "Lot"));
                dict["LT"].numeric = "01 to 03";
                dict.Add("LU", new PackagingTypeRecord("LU", "Lug"));
                dict["LU"].description = "A wooden box for the transportation and storage of fruit or vegetables.";
                dict["LU"].numeric = "23";
                dict.Add("LV", new PackagingTypeRecord("LV", "Liftvan"));
                dict["LV"].description = "A wooden or metal container used for packing household goods and personal effects" +
                    ".";
                dict["LV"].numeric = "22 to 24";
                dict.Add("LZ", new PackagingTypeRecord("LZ", "Logs, in bundle/bunch/truss"));
                dict["LZ"].numeric = "12";
                dict.Add("MA", new PackagingTypeRecord("MA", "Crate, metal"));
                dict["MA"].description = "Containment box made of metal for retaining substances or articles.";
                dict["MA"].numeric = "23 to 25 or 27";
                dict.Add("MB", new PackagingTypeRecord("MB", "Bag, multiply"));
                dict["MB"].numeric = "62 to 64";
                dict.Add("MC", new PackagingTypeRecord("MC", "Crate, milk"));
                dict["MC"].numeric = "27";
                dict.Add("ME", new PackagingTypeRecord("ME", "Container, metal"));
                dict["ME"].description = "A type of containment box made of metal for retaining substances or articles, not" +
                    " otherwise specified as transport equipment.";
                dict["ME"].numeric = "23 to 25 or 27";
                dict.Add("MR", new PackagingTypeRecord("MR", "Receptacle, metal"));
                dict["MR"].description = "Containment vessel made of metal for retaining substances or articles.";
                dict["MR"].numeric = "21 to 23 or\r 31 to 33";
                dict.Add("MS", new PackagingTypeRecord("MS", "Sack, multi-wall"));
                dict["MS"].numeric = "62 to 64";
                dict.Add("MT", new PackagingTypeRecord("MT", "Mat"));
                dict["MT"].numeric = "67";
                dict.Add("MW", new PackagingTypeRecord("MW", "Receptacle, plastic wrapped"));
                dict["MW"].description = "Containment vessel wrapped with plastic for retaining substances or articles.";
                dict["MW"].numeric = "21 to 23 or\r 31 to 33 or\r 41 to 43 or\r 61 to 63";
                dict.Add("MX", new PackagingTypeRecord("MX", "Matchbox"));
                dict["MX"].numeric = "21";
                dict.Add("NA", new PackagingTypeRecord("NA", "Not available"));
                dict["NA"].numeric = "0";
                dict.Add("NE", new PackagingTypeRecord("NE", "Unpacked or unpackaged"));
                dict["NE"].numeric = "0";
                dict.Add("NF", new PackagingTypeRecord("NF", "Unpacked or unpackaged, single unit"));
                dict["NF"].numeric = "0";
                dict.Add("NG", new PackagingTypeRecord("NG", "Unpacked or unpackaged, multiple units"));
                dict["NG"].numeric = "0";
                dict.Add("NS", new PackagingTypeRecord("NS", "Nest"));
                dict["NS"].numeric = "24";
                dict.Add("NT", new PackagingTypeRecord("NT", "Net"));
                dict["NT"].numeric = "66";
                dict.Add("NU", new PackagingTypeRecord("NU", "Net, tube, plastic"));
                dict["NU"].numeric = "66";
                dict.Add("NV", new PackagingTypeRecord("NV", "Net, tube, textile"));
                dict["NV"].numeric = "66";
                dict.Add("OA", new PackagingTypeRecord("OA", "Pallet, CHEP 40 cm x 60 cm"));
                dict["OA"].description = "Commonwealth Handling Equipment Pool (CHEP) standard pallet of dimensions 40 cent" +
                    "imeters x 60 centimeters.";
                dict["OA"].numeric = "92";
                dict.Add("OB", new PackagingTypeRecord("OB", "Pallet, CHEP 80 cm x 120 cm"));
                dict["OB"].description = "Commonwealth Handling Equipment Pool (CHEP) standard pallet of dimensions 80 cent" +
                    "imeters x 120 centimeters.";
                dict["OB"].numeric = "92";
                dict.Add("OC", new PackagingTypeRecord("OC", "Pallet, CHEP 100 cm x 120 cm"));
                dict["OC"].description = "Commonwealth Handling Equipment Pool (CHEP) standard pallet of dimensions 100 cen" +
                    "timeters x 120 centimeters.";
                dict["OC"].numeric = "92";
                dict.Add("OD", new PackagingTypeRecord("OD", "Pallet, AS 4068-1993"));
                dict["OD"].description = "Australian standard pallet of dimensions 115.5 centimeters x 116.5 centimeters.";
                dict["OD"].numeric = "92";
                dict.Add("OE", new PackagingTypeRecord("OE", "Pallet, ISO T11"));
                dict["OE"].description = "ISO standard pallet of dimensions 110 centimeters x 110 centimeters, prevalent in" +
                    " Asia - Pacific region.";
                dict["OE"].numeric = "92";
                dict.Add("OF", new PackagingTypeRecord("OF", "Platform, unspecified weight or dimension"));
                dict["OF"].description = "A pallet equivalent shipping platform of unknown dimensions or unknown weight.";
                dict["OF"].numeric = "92";
                dict.Add("OK", new PackagingTypeRecord("OK", "Block"));
                dict["OK"].description = "A solid piece of a hard substance, such as granite, having one or more flat sides" +
                    ".";
                dict["OK"].numeric = "17";
                dict.Add("OT", new PackagingTypeRecord("OT", "Octabin"));
                dict["OT"].description = "A standard cardboard container of large dimensions for storing for example vegeta" +
                    "bles, granules of plastics or other dry products.";
                dict["OT"].numeric = "25";
                dict.Add("OU", new PackagingTypeRecord("OU", "Container, outer"));
                dict["OU"].description = "A type of containment box that serves as the outer shipping container, not otherw" +
                    "ise specified as transport equipment.";
                dict["OU"].numeric = "23 to 25 or 27";
                dict.Add("P2", new PackagingTypeRecord("P2", "Pan"));
                dict["P2"].description = "A shallow, wide, open container, usually of metal.";
                dict["P2"].numeric = "51";
                dict.Add("PA", new PackagingTypeRecord("PA", "Packet"));
                dict["PA"].description = "Small package.";
                dict["PA"].numeric = "21 to 23";
                dict.Add("PB", new PackagingTypeRecord("PB", "Pallet, box Combined open-ended box and pallet"));
                dict["PB"].numeric = "92";
                dict.Add("PC", new PackagingTypeRecord("PC", "Parcel"));
                dict["PC"].numeric = "21 to 23 or\r 61 to 63";
                dict.Add("PD", new PackagingTypeRecord("PD", "Pallet, modular, collars 80cms * 100cms"));
                dict["PD"].description = "Standard sized pallet of dimensions 80 centimeters by 100 centimeters (cms).";
                dict["PD"].numeric = "92";
                dict.Add("PE", new PackagingTypeRecord("PE", "Pallet, modular, collars 80cms * 120cms"));
                dict["PE"].description = "Standard sized pallet of dimensions 80 centimeters by 120 centimeters (cms).";
                dict["PE"].numeric = "92";
                dict.Add("PF", new PackagingTypeRecord("PF", "Pen"));
                dict["PF"].description = "A small open top enclosure for retaining animals.";
                dict["PF"].numeric = "26 or 27";
                dict.Add("PG", new PackagingTypeRecord("PG", "Plate"));
                dict["PG"].numeric = "15";
                dict.Add("PH", new PackagingTypeRecord("PH", "Pitcher"));
                dict["PH"].numeric = "41";
                dict.Add("PI", new PackagingTypeRecord("PI", "Pipe"));
                dict["PI"].numeric = "11";
                dict.Add("PJ", new PackagingTypeRecord("PJ", "Punnet"));
                dict["PJ"].numeric = "27";
                dict.Add("PK", new PackagingTypeRecord("PK", "Package"));
                dict["PK"].description = "Standard packaging unit.";
                dict["PK"].numeric = "21 to 23";
                dict.Add("PL", new PackagingTypeRecord("PL", "Pail"));
                dict["PL"].numeric = "51";
                dict.Add("PN", new PackagingTypeRecord("PN", "Plank"));
                dict["PN"].numeric = "16";
                dict.Add("PO", new PackagingTypeRecord("PO", "Pouch"));
                dict["PO"].numeric = "61";
                dict.Add("PP", new PackagingTypeRecord("PP", "Piece"));
                dict["PP"].description = "A loose or unpacked article.";
                dict["PP"].numeric = "19";
                dict.Add("PR", new PackagingTypeRecord("PR", "Receptacle, plastic"));
                dict["PR"].description = "Containment vessel made of plastic for retaining substances or articles.";
                dict["PR"].numeric = "21 to 23 or\r 31 to 33 or\r 41 to 43 or\r 61 to 63";
                dict.Add("PT", new PackagingTypeRecord("PT", "Pot"));
                dict["PT"].numeric = "41";
                dict.Add("PU", new PackagingTypeRecord("PU", "Tray"));
                dict["PU"].numeric = "27";
                dict.Add("PV", new PackagingTypeRecord("PV", "Pipes, in bundle/bunch/truss"));
                dict["PV"].numeric = "11";
                dict.Add("PX", new PackagingTypeRecord("PX", "Pallet"));
                dict["PX"].description = "Platform or open-ended box, usually made of wood, on which goods are retained for" +
                    " ease of mechanical handling during transport and storage.";
                dict["PX"].numeric = "92";
                dict.Add("PY", new PackagingTypeRecord("PY", "Plates, in bundle/bunch/truss"));
                dict["PY"].numeric = "15";
                dict.Add("PZ", new PackagingTypeRecord("PZ", "Planks, in bundle/bunch/truss"));
                dict["PZ"].numeric = "16";
                dict.Add("QA", new PackagingTypeRecord("QA", "Drum, steel, non-removable head"));
                dict["QA"].numeric = "34";
                dict.Add("QB", new PackagingTypeRecord("QB", "Drum, steel, removable head"));
                dict["QB"].numeric = "34";
                dict.Add("QC", new PackagingTypeRecord("QC", "Drum, aluminium, non-removable head"));
                dict["QC"].numeric = "34";
                dict.Add("QD", new PackagingTypeRecord("QD", "Drum, aluminium, removable head"));
                dict["QD"].numeric = "34";
                dict.Add("QF", new PackagingTypeRecord("QF", "Drum, plastic, non-removable head"));
                dict["QF"].numeric = "34";
                dict.Add("QG", new PackagingTypeRecord("QG", "Drum, plastic, removable head"));
                dict["QG"].numeric = "34";
                dict.Add("QH", new PackagingTypeRecord("QH", "Barrel, wooden, bung type"));
                dict["QH"].numeric = "44 or 45";
                dict.Add("QJ", new PackagingTypeRecord("QJ", "Barrel, wooden, removable head"));
                dict["QJ"].numeric = "44 or 45";
                dict.Add("QK", new PackagingTypeRecord("QK", "Jerrican, steel, non-removable head"));
                dict["QK"].numeric = "23 or 33";
                dict.Add("QL", new PackagingTypeRecord("QL", "Jerrican, steel, removable head"));
                dict["QL"].numeric = "23 or 33";
                dict.Add("QM", new PackagingTypeRecord("QM", "Jerrican, plastic, non-removable head"));
                dict["QM"].numeric = "23 or 33";
                dict.Add("QN", new PackagingTypeRecord("QN", "Jerrican, plastic, removable head"));
                dict["QN"].numeric = "23 or 33";
                dict.Add("QP", new PackagingTypeRecord("QP", "Box, wooden, natural wood, ordinary"));
                dict["QP"].numeric = "21 to 25";
                dict.Add("QQ", new PackagingTypeRecord("QQ", "Box, wooden, natural wood, with sift proof walls"));
                dict["QQ"].numeric = "21 to 25";
                dict.Add("QR", new PackagingTypeRecord("QR", "Box, plastic, expanded"));
                dict["QR"].numeric = "21 to 25";
                dict.Add("QS", new PackagingTypeRecord("QS", "Box, plastic, solid"));
                dict["QS"].numeric = "21 to 25";
                dict.Add("RD", new PackagingTypeRecord("RD", "Rod"));
                dict["RD"].numeric = "12";
                dict.Add("RG", new PackagingTypeRecord("RG", "Ring"));
                dict["RG"].numeric = "14";
                dict.Add("RJ", new PackagingTypeRecord("RJ", "Rack, clothing hanger"));
                dict["RJ"].numeric = "93";
                dict.Add("RK", new PackagingTypeRecord("RK", "Rack"));
                dict["RK"].numeric = "93";
                dict.Add("RL", new PackagingTypeRecord("RL", "Reel"));
                dict["RL"].description = "Cylindrical rotatory device with a rim at each end on which materials are wound.";
                dict["RL"].numeric = "91";
                dict.Add("RO", new PackagingTypeRecord("RO", "Roll"));
                dict["RO"].numeric = "13";
                dict.Add("RT", new PackagingTypeRecord("RT", "Rednet"));
                dict["RT"].description = "Containment material made of red mesh netting for retaining articles (e.g. trees)" +
                    ".";
                dict["RT"].numeric = "66";
                dict.Add("RZ", new PackagingTypeRecord("RZ", "Rods, in bundle/bunch/truss"));
                dict["RZ"].numeric = "12";
                dict.Add("SA", new PackagingTypeRecord("SA", "Sack"));
                dict["SA"].numeric = "65";
                dict.Add("SB", new PackagingTypeRecord("SB", "Slab"));
                dict["SB"].numeric = "16 or 17";
                dict.Add("SC", new PackagingTypeRecord("SC", "Crate, shallow"));
                dict["SC"].numeric = "27";
                dict.Add("SD", new PackagingTypeRecord("SD", "Spindle"));
                dict["SD"].numeric = "91";
                dict.Add("SE", new PackagingTypeRecord("SE", "Sea-chest"));
                dict["SE"].numeric = "22 or 23";
                dict.Add("SH", new PackagingTypeRecord("SH", "Sachet"));
                dict["SH"].numeric = "61";
                dict.Add("SI", new PackagingTypeRecord("SI", "Skid"));
                dict["SI"].description = "A low movable platform or pallet to facilitate the handling and transport of good" +
                    "s.";
                dict["SI"].numeric = "92";
                dict.Add("SK", new PackagingTypeRecord("SK", "Case, skeleton"));
                dict["SK"].numeric = "26";
                dict.Add("SL", new PackagingTypeRecord("SL", "Slipsheet"));
                dict["SL"].description = "Hard plastic sheeting primarily used as the base on which to stack goods to optim" +
                    "ise the space within a container. May be used as an alternative to a palletized " +
                    "packaging.";
                dict["SL"].numeric = "67";
                dict.Add("SM", new PackagingTypeRecord("SM", "Sheetmetal"));
                dict["SM"].numeric = "15";
                dict.Add("SO", new PackagingTypeRecord("SO", "Spool"));
                dict["SO"].description = "A packaging container used in the transport of such items as wire, cable, tape an" +
                    "d yarn.";
                dict["SO"].numeric = "91";
                dict.Add("SP", new PackagingTypeRecord("SP", "Sheet, plastic wrapping"));
                dict["SP"].numeric = "15";
                dict.Add("SS", new PackagingTypeRecord("SS", "Case, steel"));
                dict["SS"].numeric = "21 to 25";
                dict.Add("ST", new PackagingTypeRecord("ST", "Sheet"));
                dict["ST"].numeric = "15";
                dict.Add("SU", new PackagingTypeRecord("SU", "Suitcase"));
                dict["SU"].numeric = "21 to 23 or\r 61 to 63";
                dict.Add("SV", new PackagingTypeRecord("SV", "Envelope, steel"));
                dict["SV"].numeric = "67";
                dict.Add("SW", new PackagingTypeRecord("SW", "Shrinkwrapped"));
                dict["SW"].description = "Goods retained in a transparent plastic film that has been wrapped around and the" +
                    "n shrunk tightly on to the goods.";
                dict["SW"].numeric = "67";
                dict.Add("SX", new PackagingTypeRecord("SX", "Set"));
                dict["SX"].numeric = "11 to 45";
                dict.Add("SY", new PackagingTypeRecord("SY", "Sleeve"));
                dict["SY"].numeric = "69";
                dict.Add("SZ", new PackagingTypeRecord("SZ", "Sheets, in bundle/bunch/truss"));
                dict["SZ"].numeric = "15";
                dict.Add("T1", new PackagingTypeRecord("T1", "Tablet"));
                dict["T1"].description = "A loose or unpacked article in the form of a bar, block or piece.";
                dict["T1"].numeric = "16";
                dict.Add("TB", new PackagingTypeRecord("TB", "Tub"));
                dict["TB"].numeric = "51";
                dict.Add("TC", new PackagingTypeRecord("TC", "Tea-chest"));
                dict["TC"].numeric = "21 to 23";
                dict.Add("TD", new PackagingTypeRecord("TD", "Tube, collapsible"));
                dict["TD"].numeric = "61 to 65";
                dict.Add("TE", new PackagingTypeRecord("TE", "Tyre"));
                dict["TE"].description = "A ring made of rubber and/or metal surrounding a wheel.";
                dict["TE"].numeric = "93";
                dict.Add("TG", new PackagingTypeRecord("TG", "Tank container, generic"));
                dict["TG"].description = "A specially constructed container for transporting liquids and gases in bulk.";
                dict["TG"].numeric = "93";
                dict.Add("TI", new PackagingTypeRecord("TI", "Tierce"));
                dict["TI"].numeric = "44";
                dict.Add("TK", new PackagingTypeRecord("TK", "Tank, rectangular"));
                dict["TK"].numeric = "24 or 25";
                dict.Add("TL", new PackagingTypeRecord("TL", "Tub, with lid"));
                dict["TL"].numeric = "51";
                dict.Add("TN", new PackagingTypeRecord("TN", "Tin"));
                dict["TN"].numeric = "21 or 22";
                dict.Add("TO", new PackagingTypeRecord("TO", "Tun"));
                dict["TO"].numeric = "44 or 45";
                dict.Add("TR", new PackagingTypeRecord("TR", "Trunk"));
                dict["TR"].numeric = "24 or 25";
                dict.Add("TS", new PackagingTypeRecord("TS", "Truss"));
                dict["TS"].numeric = "16";
                dict.Add("TT", new PackagingTypeRecord("TT", "Bag, tote"));
                dict["TT"].description = "A capacious bag or basket.";
                dict["TT"].numeric = "62 or 63";
                dict.Add("TU", new PackagingTypeRecord("TU", "Tube"));
                dict["TU"].numeric = "11";
                dict.Add("TV", new PackagingTypeRecord("TV", "Tube, with nozzle"));
                dict["TV"].description = "A tube made of plastic, metal or cardboard fitted with a nozzle, containing a liq" +
                    "uid or semi-liquid product, e.g. silicon.";
                dict["TV"].numeric = "31 or 32";
                dict.Add("TW", new PackagingTypeRecord("TW", "Pallet, triwall"));
                dict["TW"].description = "A lightweight pallet made from heavy duty corrugated board.";
                dict["TW"].numeric = "92";
                dict.Add("TY", new PackagingTypeRecord("TY", "Tank, cylindrical"));
                dict["TY"].numeric = "34 or 35";
                dict.Add("TZ", new PackagingTypeRecord("TZ", "Tubes, in bundle/bunch/truss"));
                dict["TZ"].numeric = "11";
                dict.Add("UC", new PackagingTypeRecord("UC", "Uncaged"));
                dict["UC"].numeric = "0";
                dict.Add("UN", new PackagingTypeRecord("UN", "Unit"));
                dict["UN"].description = "A type of package composed of a single item or object, not otherwise specified as" +
                    " a unit of transport equipment.";
                dict["UN"].numeric = "23 to 25 or 27";
                dict.Add("VA", new PackagingTypeRecord("VA", "Vat"));
                dict["VA"].numeric = "35";
                dict.Add("VG", new PackagingTypeRecord("VG", "Bulk, gas (at 1031 mbar and 15°C)"));
                dict["VG"].numeric = "6";
                dict.Add("VI", new PackagingTypeRecord("VI", "Vial"));
                dict["VI"].numeric = "31";
                dict.Add("VK", new PackagingTypeRecord("VK", "Vanpack"));
                dict["VK"].description = "A type of wooden crate.";
                dict["VK"].numeric = "99";
                dict.Add("VL", new PackagingTypeRecord("VL", "Bulk, liquid"));
                dict["VL"].numeric = "4";
                dict.Add("VO", new PackagingTypeRecord("VO", "Bulk, solid, large particles (nodules)"));
                dict["VO"].numeric = "3";
                dict.Add("VP", new PackagingTypeRecord("VP", "Vacuum-packed"));
                dict["VP"].numeric = "67";
                dict.Add("VQ", new PackagingTypeRecord("VQ", "Bulk, liquefied gas (at abnormal temperature/pressure)"));
                dict["VQ"].numeric = "5";
                dict.Add("VN", new PackagingTypeRecord("VN", "Vehicle"));
                dict["VN"].description = "A self-propelled means of conveyance.";
                dict["VN"].numeric = "93";
                dict.Add("VR", new PackagingTypeRecord("VR", "Bulk, solid, granular particles (grains)"));
                dict["VR"].numeric = "2";
                dict.Add("VS", new PackagingTypeRecord("VS", "Bulk, scrap metal"));
                dict["VS"].description = "Loose or unpacked scrap metal transported in bulk form.";
                dict["VS"].numeric = "9";
                dict.Add("VY", new PackagingTypeRecord("VY", "Bulk, solid, fine particles (powders)"));
                dict["VY"].numeric = "1";
                dict.Add("WA", new PackagingTypeRecord("WA", "Intermediate bulk container"));
                dict["WA"].description = "A reusable container made of metal, plastic, textile, wood or composite materials" +
                    " used to facilitate transportation of bulk solids and liquids in manageable volu" +
                    "mes.";
                dict["WA"].numeric = "23 to 26 or\r 62 to 64";
                dict.Add("WB", new PackagingTypeRecord("WB", "Wickerbottle"));
                dict["WB"].numeric = "42 or 43";
                dict.Add("WC", new PackagingTypeRecord("WC", "Intermediate bulk container, steel"));
                dict["WC"].numeric = "23 to 26";
                dict.Add("WD", new PackagingTypeRecord("WD", "Intermediate bulk container, aluminium"));
                dict["WD"].numeric = "23 to 26";
                dict.Add("WF", new PackagingTypeRecord("WF", "Intermediate bulk container, metal"));
                dict["WF"].numeric = "23 to 26";
                dict.Add("WG", new PackagingTypeRecord("WG", "Intermediate bulk container, steel, pressurised > 10 kpa"));
                dict["WG"].numeric = "23 to 26";
                dict.Add("WH", new PackagingTypeRecord("WH", "Intermediate bulk container, aluminium, pressurised > 10 kpa"));
                dict["WH"].numeric = "23 to 26";
                dict.Add("WJ", new PackagingTypeRecord("WJ", "Intermediate bulk container, metal, pressure 10 kpa"));
                dict["WJ"].numeric = "23 to 26";
                dict.Add("WK", new PackagingTypeRecord("WK", "Intermediate bulk container, steel, liquid"));
                dict["WK"].numeric = "23 to 26";
                dict.Add("WL", new PackagingTypeRecord("WL", "Intermediate bulk container, aluminium, liquid"));
                dict["WL"].numeric = "23 to 26";
                dict.Add("WM", new PackagingTypeRecord("WM", "Intermediate bulk container, metal, liquid"));
                dict["WM"].numeric = "23 to 26";
                dict.Add("WN", new PackagingTypeRecord("WN", "Intermediate bulk container, woven plastic, without coat/liner"));
                dict["WN"].numeric = "62 to 64";
                dict.Add("WP", new PackagingTypeRecord("WP", "Intermediate bulk container, woven plastic, coated"));
                dict["WP"].numeric = "62 to 64";
                dict.Add("WQ", new PackagingTypeRecord("WQ", "Intermediate bulk container, woven plastic, with liner"));
                dict["WQ"].numeric = "62 to 64";
                dict.Add("WR", new PackagingTypeRecord("WR", "Intermediate bulk container, woven plastic, coated and liner"));
                dict["WR"].numeric = "62 to 64";
                dict.Add("WS", new PackagingTypeRecord("WS", "Intermediate bulk container, plastic film"));
                dict["WS"].numeric = "62 to 64";
                dict.Add("WT", new PackagingTypeRecord("WT", "Intermediate bulk container, textile with out coat/liner"));
                dict["WT"].numeric = "62 to 64";
                dict.Add("WU", new PackagingTypeRecord("WU", "Intermediate bulk container, natural wood, with inner liner"));
                dict["WU"].numeric = "23 to 26";
                dict.Add("WV", new PackagingTypeRecord("WV", "Intermediate bulk container, textile, coated"));
                dict["WV"].numeric = "62 to 64";
                dict.Add("WW", new PackagingTypeRecord("WW", "Intermediate bulk container, textile, with liner"));
                dict["WW"].numeric = "62 to 64";
                dict.Add("WX", new PackagingTypeRecord("WX", "Intermediate bulk container, textile, coated and liner"));
                dict["WX"].numeric = "62 to 64";
                dict.Add("WY", new PackagingTypeRecord("WY", "Intermediate bulk container, plywood, with inner liner"));
                dict["WY"].numeric = "23 to 26";
                dict.Add("WZ", new PackagingTypeRecord("WZ", "Intermediate bulk container, reconstituted wood, with inner liner"));
                dict["WZ"].numeric = "23 to 26";
                dict.Add("XA", new PackagingTypeRecord("XA", "Bag, woven plastic, without inner coat/liner"));
                dict["XA"].numeric = "62 to 64";
                dict.Add("XB", new PackagingTypeRecord("XB", "Bag, woven plastic, sift proof"));
                dict["XB"].numeric = "62 to 64";
                dict.Add("XC", new PackagingTypeRecord("XC", "Bag, woven plastic, water resistant"));
                dict["XC"].numeric = "62 to 64";
                dict.Add("XD", new PackagingTypeRecord("XD", "Bag, plastics film"));
                dict["XD"].numeric = "62 to 64";
                dict.Add("XF", new PackagingTypeRecord("XF", "Bag, textile, without inner coat/liner"));
                dict["XF"].numeric = "62 to 64";
                dict.Add("XG", new PackagingTypeRecord("XG", "Bag, textile, sift proof"));
                dict["XG"].numeric = "62 to 64";
                dict.Add("XH", new PackagingTypeRecord("XH", "Bag, textile, water resistant"));
                dict["XH"].numeric = "62 to 64";
                dict.Add("XJ", new PackagingTypeRecord("XJ", "Bag, paper, multi-wall"));
                dict["XJ"].numeric = "62 to 64";
                dict.Add("XK", new PackagingTypeRecord("XK", "Bag, paper, multi-wall, water resistant"));
                dict["XK"].numeric = "62 to 64";
                dict.Add("YA", new PackagingTypeRecord("YA", "Composite packaging, plastic receptacle in steel drum"));
                dict["YA"].numeric = "33 or 34";
                dict.Add("YB", new PackagingTypeRecord("YB", "Composite packaging, plastic receptacle in steel crate box"));
                dict["YB"].numeric = "24 or 25";
                dict.Add("YC", new PackagingTypeRecord("YC", "Composite packaging, plastic receptacle in aluminium drum"));
                dict["YC"].numeric = "33 or 34";
                dict.Add("YD", new PackagingTypeRecord("YD", "Composite packaging, plastic receptacle in aluminium crate"));
                dict["YD"].numeric = "24 or 25";
                dict.Add("YF", new PackagingTypeRecord("YF", "Composite packaging, plastic receptacle in wooden box"));
                dict["YF"].numeric = "24 or 25";
                dict.Add("YG", new PackagingTypeRecord("YG", "Composite packaging, plastic receptacle in plywood drum"));
                dict["YG"].numeric = "33 or 34";
                dict.Add("YH", new PackagingTypeRecord("YH", "Composite packaging, plastic receptacle in plywood box"));
                dict["YH"].numeric = "24 or 25";
                dict.Add("YJ", new PackagingTypeRecord("YJ", "Composite packaging, plastic receptacle in fibre drum"));
                dict["YJ"].numeric = "33 or 34";
                dict.Add("YK", new PackagingTypeRecord("YK", "Composite packaging, plastic receptacle in fibreboard box"));
                dict["YK"].numeric = "24 or 25";
                dict.Add("YL", new PackagingTypeRecord("YL", "Composite packaging, plastic receptacle in plastic drum"));
                dict["YL"].numeric = "33 or 34";
                dict.Add("YM", new PackagingTypeRecord("YM", "Composite packaging, plastic receptacle in solid plastic box"));
                dict["YM"].numeric = "24 or 25";
                dict.Add("YN", new PackagingTypeRecord("YN", "Composite packaging, glass receptacle in steel drum"));
                dict["YN"].numeric = "33 or 34";
                dict.Add("YP", new PackagingTypeRecord("YP", "Composite packaging, glass receptacle in steel crate box"));
                dict["YP"].numeric = "24 or 25";
                dict.Add("YQ", new PackagingTypeRecord("YQ", "Composite packaging, glass receptacle in aluminium drum"));
                dict["YQ"].numeric = "33 or 34";
                dict.Add("YR", new PackagingTypeRecord("YR", "Composite packaging, glass receptacle in aluminium crate"));
                dict["YR"].numeric = "24 or 25";
                dict.Add("YS", new PackagingTypeRecord("YS", "Composite packaging, glass receptacle in wooden box"));
                dict["YS"].numeric = "24 or 25";
                dict.Add("YT", new PackagingTypeRecord("YT", "Composite packaging, glass receptacle in plywood drum"));
                dict["YT"].numeric = "33 or 34";
                dict.Add("YV", new PackagingTypeRecord("YV", "Composite packaging, glass receptacle in wickerwork hamper"));
                dict["YV"].numeric = "23";
                dict.Add("YW", new PackagingTypeRecord("YW", "Composite packaging, glass receptacle in fibre drum"));
                dict["YW"].numeric = "33 or 34";
                dict.Add("YX", new PackagingTypeRecord("YX", "Composite packaging, glass receptacle in fibreboard box"));
                dict["YX"].numeric = "24 or 25";
                dict.Add("YY", new PackagingTypeRecord("YY", "Composite packaging, glass receptacle in expandable plastic pack"));
                dict["YY"].numeric = "62 or 63";
                dict.Add("YZ", new PackagingTypeRecord("YZ", "Composite packaging, glass receptacle in solid plastic pack"));
                dict["YZ"].numeric = "23 or 24";
                dict.Add("ZA", new PackagingTypeRecord("ZA", "Intermediate bulk container, paper, multi-wall"));
                dict["ZA"].numeric = "62 to 64";
                dict.Add("ZB", new PackagingTypeRecord("ZB", "Bag, large"));
                dict["ZB"].numeric = "62 to 64";
                dict.Add("ZC", new PackagingTypeRecord("ZC", "Intermediate bulk container, paper, multi-wall, water resistant"));
                dict["ZC"].numeric = "62 to 64";
                dict.Add("ZD", new PackagingTypeRecord("ZD", "Intermediate bulk container, rigid plastic, with structural equipment, solids"));
                dict["ZD"].numeric = "23 to 26";
                dict.Add("ZF", new PackagingTypeRecord("ZF", "Intermediate bulk container, rigid plastic, freestanding, solids"));
                dict["ZF"].numeric = "23 to 26";
                dict.Add("ZG", new PackagingTypeRecord("ZG", "Intermediate bulk container, rigid plastic, with structural equipment, pressurise" +
                            "d"));
                dict["ZG"].numeric = "23 to 26";
                dict.Add("ZH", new PackagingTypeRecord("ZH", "Intermediate bulk container, rigid plastic, freestanding, pressurised"));
                dict["ZH"].numeric = "23 to 26";
                dict.Add("ZJ", new PackagingTypeRecord("ZJ", "Intermediate bulk container, rigid plastic, with structural equipment, liquids"));
                dict["ZJ"].numeric = "23 to 26";
                dict.Add("ZK", new PackagingTypeRecord("ZK", "Intermediate bulk container, rigid plastic, freestanding, liquids"));
                dict["ZK"].numeric = "23 to 26";
                dict.Add("ZL", new PackagingTypeRecord("ZL", "Intermediate bulk container, composite, rigid plastic, solids"));
                dict["ZL"].numeric = "23 to 26";
                dict.Add("ZM", new PackagingTypeRecord("ZM", "Intermediate bulk container, composite, flexible plastic, solids"));
                dict["ZM"].numeric = "62 to 64";
                dict.Add("ZN", new PackagingTypeRecord("ZN", "Intermediate bulk container, composite, rigid plastic, pressurised"));
                dict["ZN"].numeric = "23 to 26";
                dict.Add("ZP", new PackagingTypeRecord("ZP", "Intermediate bulk container, composite, flexible plastic, pressurised"));
                dict["ZP"].numeric = "62 to 64";
                dict.Add("ZQ", new PackagingTypeRecord("ZQ", "Intermediate bulk container, composite, rigid plastic, liquids"));
                dict["ZQ"].numeric = "23 to 26";
                dict.Add("ZR", new PackagingTypeRecord("ZR", "Intermediate bulk container, composite, flexible plastic, liquids"));
                dict["ZR"].numeric = "62 to 64";
                dict.Add("ZS", new PackagingTypeRecord("ZS", "Intermediate bulk container, composite"));
                dict["ZS"].numeric = "23 to 26 or\r 62 to 64";
                dict.Add("ZT", new PackagingTypeRecord("ZT", "Intermediate bulk container, fibreboard"));
                dict["ZT"].numeric = "23 to 26";
                dict.Add("ZU", new PackagingTypeRecord("ZU", "Intermediate bulk container, flexible"));
                dict["ZU"].numeric = "23 to 26";
                dict.Add("ZV", new PackagingTypeRecord("ZV", "Intermediate bulk container, metal, other than steel"));
                dict["ZV"].numeric = "23 to 26";
                dict.Add("ZW", new PackagingTypeRecord("ZW", "Intermediate bulk container, natural wood"));
                dict["ZW"].numeric = "23 to 26";
                dict.Add("ZX", new PackagingTypeRecord("ZX", "Intermediate bulk container, plywood"));
                dict["ZX"].numeric = "23 to 26";
                dict.Add("ZY", new PackagingTypeRecord("ZY", "Intermediate bulk container, reconstituted wood"));
                dict["ZY"].numeric = "23 to 26";
                dict.Add("ZZ", new PackagingTypeRecord("ZZ", "Mutually defined"));
                dict["ZZ"].numeric = "0";
                return dict;
            }
        }
        
        public ITela.CodeValueCollection ToCodeValueCollection()
        {
            var collection = new ITela.CodeValueCollection();
            var data = DATA.Values.ToArray();
            for (int i = 0; (i < data.Length); i = (i + 1))
            {
                collection.Add(data[i].Code, data[i].Value);
            }
            return collection;
        }
        
        public static IEnumerable<string> GetCodesAll()
        {
            return DATA.Keys;
        }
        
        public static IEnumerable<string> GetCodesAllNotIn<T>()
            where T : struct
        {
            var fields = System.Enum.GetValues(typeof(T));
            if ((fields.Length == 0))
            {
                throw new System.ArgumentOutOfRangeException("fields", "Enum of type T must contain at least one field.");
            }
            var existingCodes = new List<string>();
            for (int i = 0; (i < fields.Length); i = (i + 1))
            {
                var code = GcCodeValueParser.ReadCode(((System.Enum)(fields.GetValue(i))));
                existingCodes.Add(code);
            }
            return DATA.Keys.Except(existingCodes);
        }
        
        public static string GetValue(string code)
        {
            if ((code == null))
            {
                throw new System.ArgumentNullException("code");
            }
            if ((code.Length > 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or less characters.");
            }
            if ((code.Length < 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or more characters.");
            }
            return DATA[code].Value;
        }
        
        public static string GetValue(string code, Func<PackagingTypeRecord, string> selector)
        {
            if ((code == null))
            {
                throw new System.ArgumentNullException("code");
            }
            if ((code.Length > 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or less characters.");
            }
            if ((code.Length < 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or more characters.");
            }
            return selector(DATA[code]);
        }
        
        public static decimal GetValue(string code, Func<PackagingTypeRecord, decimal> selector)
        {
            if ((code == null))
            {
                throw new System.ArgumentNullException("code");
            }
            if ((code.Length > 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or less characters.");
            }
            if ((code.Length < 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or more characters.");
            }
            return selector(DATA[code]);
        }
        
        public static int GetValue(string code, Func<PackagingTypeRecord, int> selector)
        {
            if ((code == null))
            {
                throw new System.ArgumentNullException("code");
            }
            if ((code.Length > 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or less characters.");
            }
            if ((code.Length < 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or more characters.");
            }
            return selector(DATA[code]);
        }
        
        /// <summary>
        /// Returns a list of codes with data in selected column that match search text.
        /// Exact matches (equality ignoring cases) are returned first,
        /// then partial matches (always ignoring cases) if forceExactMatch has not been set.
        /// </summary>
        public static IEnumerable<string> GetCodesLike(string text, Func<PackagingTypeRecord, string> selector, bool forceExactMatch)
        {
            if ((text == null))
            {
                throw new System.ArgumentNullException("text");
            }
            var exactMatchingCodes = DATA.Where(x => selector(x.Value) != null && selector(x.Value).ToLowerInvariant() == text.ToLowerInvariant()).Select(x => x.Key);
            if ((forceExactMatch == true))
            {
                return exactMatchingCodes;
            }
            var containMatchingCodes = DATA.Where(x => selector(x.Value) != null && text.ToLowerInvariant().Contains(selector(x.Value).ToLowerInvariant())).Select(x => x.Key);
            var codes = new List<string>();
            codes.AddRange(exactMatchingCodes);
            codes.AddRange(containMatchingCodes.Except(exactMatchingCodes));
            return codes;
        }
    }
}
