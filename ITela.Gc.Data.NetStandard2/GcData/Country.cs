//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ITela.Gc
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    
    /// <summary>
    /// 
    /// </summary>
    public class Country : ITela.ICodeValueCollectionable
    {
        
        public static Dictionary<string, CountryRecord> DATA
        {
            get
            {
                var dict = new Dictionary<string, CountryRecord>();
                dict.Add("AF", new CountryRecord("AF", "Afghanistan"));
                dict.Add("AL", new CountryRecord("AL", "Albania"));
                dict.Add("DZ", new CountryRecord("DZ", "Algeria"));
                dict.Add("AS", new CountryRecord("AS", "American Samoa"));
                dict.Add("AD", new CountryRecord("AD", "Andorra"));
                dict.Add("AO", new CountryRecord("AO", "Angola"));
                dict.Add("AI", new CountryRecord("AI", "Anguilla"));
                dict.Add("AQ", new CountryRecord("AQ", "Antarctica"));
                dict.Add("AG", new CountryRecord("AG", "Antigua and Barbuda"));
                dict.Add("AR", new CountryRecord("AR", "Argentina"));
                dict.Add("AM", new CountryRecord("AM", "Armenia"));
                dict.Add("AW", new CountryRecord("AW", "Aruba"));
                dict.Add("AU", new CountryRecord("AU", "Australia"));
                dict.Add("AT", new CountryRecord("AT", "Austria"));
                dict.Add("AZ", new CountryRecord("AZ", "Azerbaijan"));
                dict.Add("BS", new CountryRecord("BS", "Bahamas"));
                dict.Add("BH", new CountryRecord("BH", "Bahrain"));
                dict.Add("BD", new CountryRecord("BD", "Bangladesh"));
                dict.Add("BB", new CountryRecord("BB", "Barbados"));
                dict.Add("BY", new CountryRecord("BY", "Belarus"));
                dict.Add("BE", new CountryRecord("BE", "Belgium"));
                dict.Add("BZ", new CountryRecord("BZ", "Belize"));
                dict.Add("BJ", new CountryRecord("BJ", "Benin"));
                dict.Add("BM", new CountryRecord("BM", "Bermuda"));
                dict.Add("BT", new CountryRecord("BT", "Bhutan"));
                dict.Add("BO", new CountryRecord("BO", "Bolivia, Plurinational State of"));
                dict.Add("BA", new CountryRecord("BA", "Bosnia and Herzegovina"));
                dict.Add("BW", new CountryRecord("BW", "Botswana"));
                dict.Add("BV", new CountryRecord("BV", "Bouvet Island"));
                dict.Add("BR", new CountryRecord("BR", "Brazil"));
                dict.Add("IO", new CountryRecord("IO", "British Indian Ocean Territory"));
                dict.Add("BN", new CountryRecord("BN", "Brunei Darussalam"));
                dict.Add("BG", new CountryRecord("BG", "Bulgaria"));
                dict.Add("BF", new CountryRecord("BF", "Burkina Faso"));
                dict.Add("BI", new CountryRecord("BI", "Burundi"));
                dict.Add("KH", new CountryRecord("KH", "Cambodia"));
                dict.Add("CM", new CountryRecord("CM", "Cameroon"));
                dict.Add("CA", new CountryRecord("CA", "Canada"));
                dict.Add("CV", new CountryRecord("CV", "Cape Verde"));
                dict.Add("KY", new CountryRecord("KY", "Cayman Islands"));
                dict.Add("CF", new CountryRecord("CF", "Central African Republic"));
                dict.Add("TD", new CountryRecord("TD", "Chad"));
                dict.Add("CL", new CountryRecord("CL", "Chile"));
                dict.Add("CN", new CountryRecord("CN", "China"));
                dict.Add("CX", new CountryRecord("CX", "Christmas Island"));
                dict.Add("CC", new CountryRecord("CC", "Cocos (Keeling) Islands"));
                dict.Add("CO", new CountryRecord("CO", "Colombia"));
                dict.Add("KM", new CountryRecord("KM", "Comoros"));
                dict.Add("CG", new CountryRecord("CG", "Congo"));
                dict.Add("CK", new CountryRecord("CK", "Cook Islands"));
                dict.Add("CR", new CountryRecord("CR", "Costa Rica"));
                dict.Add("HR", new CountryRecord("HR", "Croatia"));
                dict.Add("CU", new CountryRecord("CU", "Cuba"));
                dict.Add("CY", new CountryRecord("CY", "Cyprus"));
                dict.Add("CZ", new CountryRecord("CZ", "Czech Republic"));
                dict.Add("CI", new CountryRecord("CI", "Côte d\'Ivoire"));
                dict.Add("DK", new CountryRecord("DK", "Denmark"));
                dict.Add("DJ", new CountryRecord("DJ", "Djibouti"));
                dict.Add("DM", new CountryRecord("DM", "Dominica"));
                dict.Add("DO", new CountryRecord("DO", "Dominican Republic"));
                dict.Add("EC", new CountryRecord("EC", "Ecuador"));
                dict.Add("EG", new CountryRecord("EG", "Egypt"));
                dict.Add("SV", new CountryRecord("SV", "El Salvador"));
                dict.Add("GQ", new CountryRecord("GQ", "Equatorial Guinea"));
                dict.Add("ER", new CountryRecord("ER", "Eritrea"));
                dict.Add("EE", new CountryRecord("EE", "Estonia"));
                dict.Add("ET", new CountryRecord("ET", "Ethiopia"));
                dict.Add("FK", new CountryRecord("FK", "Falkland Islands (Malvinas)"));
                dict.Add("FO", new CountryRecord("FO", "Faroe Islands"));
                dict.Add("FJ", new CountryRecord("FJ", "Fiji"));
                dict.Add("FI", new CountryRecord("FI", "Finland"));
                dict.Add("FR", new CountryRecord("FR", "France"));
                dict.Add("GF", new CountryRecord("GF", "French Guiana"));
                dict.Add("PF", new CountryRecord("PF", "French Polynesia"));
                dict.Add("TF", new CountryRecord("TF", "French Southern Territories"));
                dict.Add("GA", new CountryRecord("GA", "Gabon"));
                dict.Add("GM", new CountryRecord("GM", "Gambia"));
                dict.Add("GE", new CountryRecord("GE", "Georgia"));
                dict.Add("DE", new CountryRecord("DE", "Germany"));
                dict.Add("GH", new CountryRecord("GH", "Ghana"));
                dict.Add("GI", new CountryRecord("GI", "Gibraltar"));
                dict.Add("GR", new CountryRecord("GR", "Greece"));
                dict.Add("GL", new CountryRecord("GL", "Greenland"));
                dict.Add("GD", new CountryRecord("GD", "Grenada"));
                dict.Add("GP", new CountryRecord("GP", "Guadeloupe"));
                dict.Add("GU", new CountryRecord("GU", "Guam"));
                dict.Add("GT", new CountryRecord("GT", "Guatemala"));
                dict.Add("GN", new CountryRecord("GN", "Guinea"));
                dict.Add("GW", new CountryRecord("GW", "Guinea-Bissau"));
                dict.Add("GY", new CountryRecord("GY", "Guyana"));
                dict.Add("HT", new CountryRecord("HT", "Haiti"));
                dict.Add("HM", new CountryRecord("HM", "Heard Island and McDonald Mcdonald Islands"));
                dict.Add("VA", new CountryRecord("VA", "Holy See (Vatican City State)"));
                dict.Add("HN", new CountryRecord("HN", "Honduras"));
                dict.Add("HK", new CountryRecord("HK", "Hong Kong"));
                dict.Add("HU", new CountryRecord("HU", "Hungary"));
                dict.Add("IS", new CountryRecord("IS", "Iceland"));
                dict.Add("IN", new CountryRecord("IN", "India"));
                dict.Add("ID", new CountryRecord("ID", "Indonesia"));
                dict.Add("IR", new CountryRecord("IR", "Iran, Islamic Republic of"));
                dict.Add("IQ", new CountryRecord("IQ", "Iraq"));
                dict.Add("IE", new CountryRecord("IE", "Ireland"));
                dict.Add("IL", new CountryRecord("IL", "Israel"));
                dict.Add("IT", new CountryRecord("IT", "Italy"));
                dict.Add("JM", new CountryRecord("JM", "Jamaica"));
                dict.Add("JP", new CountryRecord("JP", "Japan"));
                dict.Add("JO", new CountryRecord("JO", "Jordan"));
                dict.Add("KZ", new CountryRecord("KZ", "Kazakhstan"));
                dict.Add("KE", new CountryRecord("KE", "Kenya"));
                dict.Add("KI", new CountryRecord("KI", "Kiribati"));
                dict.Add("KP", new CountryRecord("KP", "Korea, Democratic People\'s Republic of"));
                dict.Add("KR", new CountryRecord("KR", "Korea, Republic of"));
                dict.Add("KW", new CountryRecord("KW", "Kuwait"));
                dict.Add("KG", new CountryRecord("KG", "Kyrgyzstan"));
                dict.Add("LA", new CountryRecord("LA", "Lao People\'s Democratic Republic"));
                dict.Add("LV", new CountryRecord("LV", "Latvia"));
                dict.Add("LB", new CountryRecord("LB", "Lebanon"));
                dict.Add("LS", new CountryRecord("LS", "Lesotho"));
                dict.Add("LR", new CountryRecord("LR", "Liberia"));
                dict.Add("LY", new CountryRecord("LY", "Libya"));
                dict.Add("LI", new CountryRecord("LI", "Liechtenstein"));
                dict.Add("LT", new CountryRecord("LT", "Lithuania"));
                dict.Add("LU", new CountryRecord("LU", "Luxembourg"));
                dict.Add("MO", new CountryRecord("MO", "Macao"));
                dict.Add("MK", new CountryRecord("MK", "Macedonia, the Former Yugoslav Republic of"));
                dict.Add("MG", new CountryRecord("MG", "Madagascar"));
                dict.Add("MW", new CountryRecord("MW", "Malawi"));
                dict.Add("MY", new CountryRecord("MY", "Malaysia"));
                dict.Add("MV", new CountryRecord("MV", "Maldives"));
                dict.Add("ML", new CountryRecord("ML", "Mali"));
                dict.Add("MT", new CountryRecord("MT", "Malta"));
                dict.Add("MH", new CountryRecord("MH", "Marshall Islands"));
                dict.Add("MQ", new CountryRecord("MQ", "Martinique"));
                dict.Add("MR", new CountryRecord("MR", "Mauritania"));
                dict.Add("MU", new CountryRecord("MU", "Mauritius"));
                dict.Add("YT", new CountryRecord("YT", "Mayotte"));
                dict.Add("MX", new CountryRecord("MX", "Mexico"));
                dict.Add("FM", new CountryRecord("FM", "Micronesia, Federated States of"));
                dict.Add("MD", new CountryRecord("MD", "Moldova, Republic of"));
                dict.Add("MC", new CountryRecord("MC", "Monaco"));
                dict.Add("MN", new CountryRecord("MN", "Mongolia"));
                dict.Add("MS", new CountryRecord("MS", "Montserrat"));
                dict.Add("MA", new CountryRecord("MA", "Morocco"));
                dict.Add("MZ", new CountryRecord("MZ", "Mozambique"));
                dict.Add("MM", new CountryRecord("MM", "Myanmar"));
                dict.Add("NA", new CountryRecord("NA", "Namibia"));
                dict.Add("NR", new CountryRecord("NR", "Nauru"));
                dict.Add("NP", new CountryRecord("NP", "Nepal"));
                dict.Add("NL", new CountryRecord("NL", "Netherlands"));
                dict.Add("NC", new CountryRecord("NC", "New Caledonia"));
                dict.Add("NZ", new CountryRecord("NZ", "New Zealand"));
                dict.Add("NI", new CountryRecord("NI", "Nicaragua"));
                dict.Add("NE", new CountryRecord("NE", "Niger"));
                dict.Add("NG", new CountryRecord("NG", "Nigeria"));
                dict.Add("NU", new CountryRecord("NU", "Niue"));
                dict.Add("NF", new CountryRecord("NF", "Norfolk Island"));
                dict.Add("MP", new CountryRecord("MP", "Northern Mariana Islands"));
                dict.Add("NO", new CountryRecord("NO", "Norway"));
                dict.Add("OM", new CountryRecord("OM", "Oman"));
                dict.Add("PK", new CountryRecord("PK", "Pakistan"));
                dict.Add("PW", new CountryRecord("PW", "Palau"));
                dict.Add("PA", new CountryRecord("PA", "Panama"));
                dict.Add("PG", new CountryRecord("PG", "Papua New Guinea"));
                dict.Add("PY", new CountryRecord("PY", "Paraguay"));
                dict.Add("PE", new CountryRecord("PE", "Peru"));
                dict.Add("PH", new CountryRecord("PH", "Philippines"));
                dict.Add("PN", new CountryRecord("PN", "Pitcairn"));
                dict.Add("PL", new CountryRecord("PL", "Poland"));
                dict.Add("PT", new CountryRecord("PT", "Portugal"));
                dict.Add("PR", new CountryRecord("PR", "Puerto Rico"));
                dict.Add("QA", new CountryRecord("QA", "Qatar"));
                dict.Add("RO", new CountryRecord("RO", "Romania"));
                dict.Add("RU", new CountryRecord("RU", "Russian Federation"));
                dict.Add("RW", new CountryRecord("RW", "Rwanda"));
                dict.Add("RE", new CountryRecord("RE", "Réunion"));
                dict.Add("SH", new CountryRecord("SH", "Saint Helena, Ascension and Tristan da Cunha"));
                dict.Add("KN", new CountryRecord("KN", "Saint Kitts and Nevis"));
                dict.Add("LC", new CountryRecord("LC", "Saint Lucia"));
                dict.Add("PM", new CountryRecord("PM", "Saint Pierre and Miquelon"));
                dict.Add("VC", new CountryRecord("VC", "Saint Vincent and the Grenadines"));
                dict.Add("WS", new CountryRecord("WS", "Samoa"));
                dict.Add("SM", new CountryRecord("SM", "San Marino"));
                dict.Add("ST", new CountryRecord("ST", "Sao Tome and Principe"));
                dict.Add("SA", new CountryRecord("SA", "Saudi Arabia"));
                dict.Add("SN", new CountryRecord("SN", "Senegal"));
                dict.Add("SC", new CountryRecord("SC", "Seychelles"));
                dict.Add("SL", new CountryRecord("SL", "Sierra Leone"));
                dict.Add("SG", new CountryRecord("SG", "Singapore"));
                dict.Add("SK", new CountryRecord("SK", "Slovakia"));
                dict.Add("SI", new CountryRecord("SI", "Slovenia"));
                dict.Add("SB", new CountryRecord("SB", "Solomon Islands"));
                dict.Add("SO", new CountryRecord("SO", "Somalia"));
                dict.Add("ZA", new CountryRecord("ZA", "South Africa"));
                dict.Add("GS", new CountryRecord("GS", "South Georgia and the South Sandwich Islands"));
                dict.Add("ES", new CountryRecord("ES", "Spain"));
                dict.Add("LK", new CountryRecord("LK", "Sri Lanka"));
                dict.Add("SD", new CountryRecord("SD", "Sudan"));
                dict.Add("SR", new CountryRecord("SR", "Suriname"));
                dict.Add("SJ", new CountryRecord("SJ", "Svalbard and Jan Mayen"));
                dict.Add("SZ", new CountryRecord("SZ", "Swaziland"));
                dict.Add("SE", new CountryRecord("SE", "Sweden"));
                dict.Add("CH", new CountryRecord("CH", "Switzerland"));
                dict.Add("SY", new CountryRecord("SY", "Syrian Arab Republic"));
                dict.Add("TW", new CountryRecord("TW", "Taiwan, Province of China"));
                dict.Add("TJ", new CountryRecord("TJ", "Tajikistan"));
                dict.Add("TZ", new CountryRecord("TZ", "Tanzania, United Republic of"));
                dict.Add("TH", new CountryRecord("TH", "Thailand"));
                dict.Add("TG", new CountryRecord("TG", "Togo"));
                dict.Add("TK", new CountryRecord("TK", "Tokelau"));
                dict.Add("TO", new CountryRecord("TO", "Tonga"));
                dict.Add("TT", new CountryRecord("TT", "Trinidad and Tobago"));
                dict.Add("TN", new CountryRecord("TN", "Tunisia"));
                dict.Add("TR", new CountryRecord("TR", "Turkey"));
                dict.Add("TM", new CountryRecord("TM", "Turkmenistan"));
                dict.Add("TC", new CountryRecord("TC", "Turks and Caicos Islands"));
                dict.Add("TV", new CountryRecord("TV", "Tuvalu"));
                dict.Add("UG", new CountryRecord("UG", "Uganda"));
                dict.Add("UA", new CountryRecord("UA", "Ukraine"));
                dict.Add("AE", new CountryRecord("AE", "United Arab Emirates"));
                dict.Add("GB", new CountryRecord("GB", "United Kingdom"));
                dict.Add("US", new CountryRecord("US", "United States"));
                dict.Add("UM", new CountryRecord("UM", "United States Minor Outlying Islands"));
                dict.Add("UY", new CountryRecord("UY", "Uruguay"));
                dict.Add("UZ", new CountryRecord("UZ", "Uzbekistan"));
                dict.Add("VU", new CountryRecord("VU", "Vanuatu"));
                dict.Add("VE", new CountryRecord("VE", "Venezuela, Bolivarian Republic of"));
                dict.Add("VN", new CountryRecord("VN", "Viet Nam"));
                dict.Add("VG", new CountryRecord("VG", "Virgin Islands, British"));
                dict.Add("VI", new CountryRecord("VI", "Virgin Islands, U.S."));
                dict.Add("WF", new CountryRecord("WF", "Wallis and Futuna"));
                dict.Add("EH", new CountryRecord("EH", "Western Sahara"));
                dict.Add("YE", new CountryRecord("YE", "Yemen"));
                dict.Add("ZM", new CountryRecord("ZM", "Zambia"));
                dict.Add("ZW", new CountryRecord("ZW", "Zimbabwe"));
                return dict;
            }
        }
        
        public ITela.CodeValueCollection ToCodeValueCollection()
        {
            var collection = new ITela.CodeValueCollection();
            var data = DATA.Values.ToArray();
            for (int i = 0; (i < data.Length); i = (i + 1))
            {
                collection.Add(data[i].Code, data[i].Value);
            }
            return collection;
        }
        
        public static IEnumerable<string> GetCodesAll()
        {
            return DATA.Keys;
        }
        
        public static IEnumerable<string> GetCodesAllNotIn<T>()
            where T : struct
        {
            var fields = System.Enum.GetValues(typeof(T));
            if ((fields.Length == 0))
            {
                throw new System.ArgumentOutOfRangeException("fields", "Enum of type T must contain at least one field.");
            }
            var existingCodes = new List<string>();
            for (int i = 0; (i < fields.Length); i = (i + 1))
            {
                var code = GcCodeValueParser.ReadCode(((System.Enum)(fields.GetValue(i))));
                existingCodes.Add(code);
            }
            return DATA.Keys.Except(existingCodes);
        }
        
        public static string GetValue(string code)
        {
            if ((code == null))
            {
                throw new System.ArgumentNullException("code");
            }
            if ((code.Length > 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or less characters.");
            }
            if ((code.Length < 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or more characters.");
            }
            return DATA[code].Value;
        }
        
        public static string GetValue(string code, Func<CountryRecord, string> selector)
        {
            if ((code == null))
            {
                throw new System.ArgumentNullException("code");
            }
            if ((code.Length > 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or less characters.");
            }
            if ((code.Length < 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or more characters.");
            }
            return selector(DATA[code]);
        }
        
        public static decimal GetValue(string code, Func<CountryRecord, decimal> selector)
        {
            if ((code == null))
            {
                throw new System.ArgumentNullException("code");
            }
            if ((code.Length > 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or less characters.");
            }
            if ((code.Length < 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or more characters.");
            }
            return selector(DATA[code]);
        }
        
        public static int GetValue(string code, Func<CountryRecord, int> selector)
        {
            if ((code == null))
            {
                throw new System.ArgumentNullException("code");
            }
            if ((code.Length > 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or less characters.");
            }
            if ((code.Length < 2))
            {
                throw new System.ArgumentOutOfRangeException("code", "Code must contain 2 or more characters.");
            }
            return selector(DATA[code]);
        }
        
        /// <summary>
        /// Returns a list of codes with data in selected column that match search text.
        /// Exact matches (equality ignoring cases) are returned first,
        /// then partial matches (always ignoring cases) if forceExactMatch has not been set.
        /// </summary>
        public static IEnumerable<string> GetCodesLike(string text, Func<CountryRecord, string> selector, bool forceExactMatch)
        {
            if ((text == null))
            {
                throw new System.ArgumentNullException("text");
            }
            var exactMatchingCodes = DATA.Where(x => selector(x.Value) != null && selector(x.Value).ToLowerInvariant() == text.ToLowerInvariant()).Select(x => x.Key);
            if ((forceExactMatch == true))
            {
                return exactMatchingCodes;
            }
            var containMatchingCodes = DATA.Where(x => selector(x.Value) != null && text.ToLowerInvariant().Contains(selector(x.Value).ToLowerInvariant())).Select(x => x.Key);
            var codes = new List<string>();
            codes.AddRange(exactMatchingCodes);
            codes.AddRange(containMatchingCodes.Except(exactMatchingCodes));
            return codes;
        }
    }
}
